<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Vue最全知识点，面试必备</title>
    <link href="/2020/09/24/vue/Vue%E6%9C%80%E5%85%A8%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%8C%E9%9D%A2%E8%AF%95%E5%BF%85%E5%A4%87/"/>
    <url>/2020/09/24/vue/Vue%E6%9C%80%E5%85%A8%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%8C%E9%9D%A2%E8%AF%95%E5%BF%85%E5%A4%87/</url>
    
    <content type="html"><![CDATA[<blockquote><p>声明：本篇文章纯属笔记性文章，非整体原创，是对vue知识的整理，对自己有很大帮助才分享出来，参考文章传送：</p><ol><li><a href="https://juejin.im/post/6844904084374290446">童欧巴对vue知识的整理</a> </li><li><a href="https://juejin.im/post/6844903918753808398">我是你的超级英雄对vue知识的整理</a> </li><li><a href="https://cn.vuejs.org/index.html">vue官网</a></li></ol></blockquote><h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><h3 id="说说你对MVVM的理解"><a href="#说说你对MVVM的理解" class="headerlink" title="说说你对MVVM的理解"></a>说说你对MVVM的理解</h3><ul><li>Model-View-ViewModel的缩写，Model代表数据模型，View代表UI组件,ViewModel将Model和View关联起来</li><li>数据会绑定到viewModel层并自动将数据渲染到页面中，视图变化的时候会通知viewModel层更新数据</li></ul><blockquote><p><a href="https://juejin.im/post/6844904115324223495">了解mvc/mvp/mvvm的区别</a></p></blockquote><h2 id="Vue2-x响应式数据-双向绑定原理"><a href="#Vue2-x响应式数据-双向绑定原理" class="headerlink" title="Vue2.x响应式数据/双向绑定原理"></a>Vue2.x响应式数据/双向绑定原理</h2><ul><li>Vue 数据双向绑定主要是指：数据变化更新视图，视图变化更新数据。其中，View变化更新Data，可以通过事件监听的方式来实现，所以 Vue数据双向绑定的工作主要是如何根据Data变化更新View。</li><li>简述：<ul><li>当你把一个普通的 JavaScript 对象传入 Vue 实例作为 data 选项，Vue 将遍历此对象所有的 property，并使用 Object.defineProperty 把这些 property 全部转为 getter/setter。</li><li>这些 getter/setter 对用户来说是不可见的，但是在内部它们让 Vue 能够追踪依赖，在 property 被访问和修改时通知变更。</li><li>每个组件实例都对应一个 watcher 实例，它会在组件渲染的过程中把“接触”过的数据 property 记录为依赖。之后当依赖项的 setter 触发时，会通知 watcher，从而使它关联的组件重新渲染。</li></ul></li></ul><p><img src="/images/pages/virtual-dom.png" alt="virtual-dom"></p><h3 id="深入理解："><a href="#深入理解：" class="headerlink" title="深入理解："></a>深入理解：</h3><ul><li>监听器 Observer：对数据对象进行遍历，包括子属性对象的属性，利用 Object.defineProperty() 对属性都加上 setter 和 getter。这样的话，给这个对象的某个值赋值，就会触发 setter，那么就能监听到了数据变化。</li><li>解析器 Compile：解析 Vue 模板指令，将模板中的变量都替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，调用更新函数进行数据更新。</li><li>订阅者 Watcher：Watcher 订阅者是 Observer 和 Compile 之间通信的桥梁 ，主要的任务是订阅 Observer 中的属性值变化的消息，当收到属性值变化的消息时，触发解析器 Compile 中对应的更新函数。每个组件实例都有相应的 watcher 实例对象，它会在组件渲染的过程中把属性记录为依赖，之后当依赖项的 setter 被调用时，会通知 watcher 重新计算，从而致使它关联的组件得以更新——这是一个典型的观察者模式</li><li>订阅器 Dep：订阅器采用 发布-订阅 设计模式，用来收集订阅者 Watcher，对监听器 Observer 和 订阅者 Watcher 进行统一管理。</li></ul><h2 id="你知道Vue3-x响应式数据原理吗？"><a href="#你知道Vue3-x响应式数据原理吗？" class="headerlink" title="你知道Vue3.x响应式数据原理吗？"></a>你知道Vue3.x响应式数据原理吗？</h2><h3 id="Vue3-x改用Proxy替代Object-defineProperty"><a href="#Vue3-x改用Proxy替代Object-defineProperty" class="headerlink" title="Vue3.x改用Proxy替代Object.defineProperty"></a>Vue3.x改用Proxy替代Object.defineProperty</h3><ul><li>因为Proxy可以直接监听对象和数组的变化，并且有多达13种拦截方法。并且作为新标准将受到浏览器厂商重点持续的性能优化。</li><li>Proxy只会代理对象的第一层，Vue3是怎样处理这个问题的呢？<ul><li>判断当前Reflect.get的返回值是否为Object，如果是则再通过reactive方法做代理， 这样就实现了深度观测。</li><li>监测数组的时候可能触发多次get/set，那么如何防止触发多次呢？我们可以判断key是否为当前被代理对象target自身属性，也可以判断旧值与新值是否相等，只有满足以上两个条件之一时，才有可能执行trigger。</li></ul></li></ul><h3 id="Proxy-与-Object-defineProperty-优劣对比"><a href="#Proxy-与-Object-defineProperty-优劣对比" class="headerlink" title="Proxy 与 Object.defineProperty 优劣对比"></a>Proxy 与 Object.defineProperty 优劣对比</h3><ul><li><p>Proxy 的优势如下:</p><ul><li>Proxy 可以直接监听对象而非属性；</li><li>Proxy 可以直接监听数组的变化；</li><li>Proxy 有多达 13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的；</li><li>Proxy 返回的是一个新对象,我们可以只操作新的对象达到目的,而 Object.defineProperty 只能遍历对象属性直接修改；</li><li>Proxy 作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利；</li></ul></li><li><p>Object.defineProperty 的优势如下:</p><ul><li>兼容性好，支持 IE9，而 Proxy 的存在浏览器兼容性问题,而且无法用 polyfill 磨平，因此 Vue 的作者才声明需要等到下个大版本( 3.0 )才能用 Proxy 重写。</li></ul></li></ul><h2 id="VUEX篇"><a href="#VUEX篇" class="headerlink" title="VUEX篇"></a>VUEX篇</h2><h3 id="Vuex-是什么？"><a href="#Vuex-是什么？" class="headerlink" title="Vuex 是什么？"></a>Vuex 是什么？</h3><blockquote><p>运用到了js设计模式中的单例模式，单例模式想要做到的是，不管我们尝试去创建多少次，它都只给你返回第一次所创建的那唯一的一个实例。</p></blockquote><ul><li>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。“store” 基本上就是一个容器，它包含着你的应用中大部分的状态 ( state )。</li><li>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</li><li>改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化。</li></ul><blockquote><p>Vuex 使用单一状态树，用一个对象就包含了全部的应用层级状态。至此它便作为一个“唯一数据源 (SSOT)”而存在。这也意味着，每个应用将仅仅包含一个 store 实例。单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。 ——Vuex官方文档</p></blockquote><p>主要包括以下几个模块：</p><ul><li>State：定义了应用状态的数据结构，可以在这里设置默认的初始状态。</li><li>Getter：允许组件从 Store 中获取数据，mapGetters 辅助函数仅仅是将 store 中的 getter 映射到局部计算属性。</li><li>Mutation：是唯一更改 store 中状态的方法，且必须是同步函数。</li><li>Action：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作。</li><li>Module：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中。</li></ul><h3 id="什么情况下使用-Vuex？"><a href="#什么情况下使用-Vuex？" class="headerlink" title="什么情况下使用 Vuex？"></a>什么情况下使用 Vuex？</h3><ul><li>如果应用够简单，最好不要使用 Vuex，一个简单的 store 模式即可</li><li>需要构建一个中大型单页应用时，使用Vuex能更好地在组件外部管理状态</li></ul><h3 id="Vuex和单纯的全局对象有什么区别？"><a href="#Vuex和单纯的全局对象有什么区别？" class="headerlink" title="Vuex和单纯的全局对象有什么区别？"></a>Vuex和单纯的全局对象有什么区别？</h3><ul><li>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。</li><li>不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</li></ul><h3 id="为什么-Vuex-的-mutation-中不能做异步操作？"><a href="#为什么-Vuex-的-mutation-中不能做异步操作？" class="headerlink" title="为什么 Vuex 的 mutation 中不能做异步操作？"></a>为什么 Vuex 的 mutation 中不能做异步操作？</h3><ul><li>Vuex中所有的状态更新的唯一途径都是mutation，异步操作通过 Action 来提交 mutation实现，这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</li><li>每个mutation执行完成后都会对应到一个新的状态变更，这样devtools就可以打个快照存下来，然后就可以实现 time-travel 了。如果mutation支持异步操作，就没有办法知道状态是何时更新的，无法很好的进行状态的追踪，给调试带来困难。</li></ul><h3 id="vuex的action有返回值吗？返回的是什么？"><a href="#vuex的action有返回值吗？返回的是什么？" class="headerlink" title="vuex的action有返回值吗？返回的是什么？"></a>vuex的action有返回值吗？返回的是什么？</h3><ul><li>store.dispatch 可以处理被触发的 action 的处理函数返回的 Promise，并且 store.dispatch 仍旧返回 Promise</li><li>Action 通常是异步的，要知道 action 什么时候结束或者组合多个 action以处理更加复杂的异步流程，可以通过定义action时返回一个promise对象，就可以在派发action的时候就可以通过处理返回的 Promise处理异步流程<blockquote><p>一个 store.dispatch 在不同模块中可以触发多个 action 函数。在这种情况下，只有当所有触发函数完成后，返回的 Promise 才会执行。</p></blockquote></li></ul><h3 id="新增：为什么不直接分发mutation-而要通过分发action之后提交-mutation变更状态"><a href="#新增：为什么不直接分发mutation-而要通过分发action之后提交-mutation变更状态" class="headerlink" title="新增：为什么不直接分发mutation,而要通过分发action之后提交 mutation变更状态"></a>新增：为什么不直接分发mutation,而要通过分发action之后提交 mutation变更状态</h3><ul><li>mutation 必须同步执行，我们可以在 action 内部执行异步操作</li><li>可以进行一系列的异步操作，并且通过提交 mutation 来记录 action 产生的副作用（即状态变更）</li></ul><h2 id="常规篇"><a href="#常规篇" class="headerlink" title="常规篇"></a>常规篇</h2><h3 id="computed-和-watch-的区别和运用的场景？"><a href="#computed-和-watch-的区别和运用的场景？" class="headerlink" title="computed 和 watch 的区别和运用的场景？"></a>computed 和 watch 的区别和运用的场景？</h3><ul><li>computed：是计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed 的值；</li><li>watch：没有缓存性，更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；当我们需要深度监听对象中的属性时，可以打开deep：true选项，这样便会对对象中的每一项进行监听</li><li>运用场景：<ul><li>当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；</li><li>当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用watch选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</li></ul></li></ul><h3 id="Vue2-x组件通信有哪些方式？"><a href="#Vue2-x组件通信有哪些方式？" class="headerlink" title="Vue2.x组件通信有哪些方式？"></a>Vue2.x组件通信有哪些方式？</h3><ul><li>父子组件通信<ul><li>事件机制(**父-&gt;子props,子-&gt;父 $on、$emit)</li><li>获取父子组件实例 $parent、$children</li><li>Ref 获取实例的方式调用组件的属性或者方法</li><li>Provide、inject (不推荐使用，组件库时很常用)</li></ul></li><li>兄弟组件通信<ul><li>eventBus 这种方法通过一个空的Vue实例作为中央事件总线（事件中心），用它来触发事件和监听事件，从而实现任何组件间的通信，包括父子、隔代、兄弟组件<blockquote><p>Vue.prototype.$bus = new Vue</p></blockquote></li></ul></li><li>跨级组件通信<ul><li>Vuex</li><li>$attrs、$listeners</li><li>Provide、inject</li></ul></li></ul><h3 id="说一下v-if和v-show的区别"><a href="#说一下v-if和v-show的区别" class="headerlink" title="说一下v-if和v-show的区别"></a>说一下v-if和v-show的区别</h3><ul><li>当条件不成立时，v-if不会渲染DOM元素，v-show操作的是样式(display)，切换当前DOM的显示和隐藏。</li><li>v-if 适用于在运行时很少改变条件，不需要频繁切换条件的场景；</li><li>v-show 则适用于需要非常频繁切换条件的场景。</li></ul><h3 id="为什么-v-for-和-v-if-不建议用在一起"><a href="#为什么-v-for-和-v-if-不建议用在一起" class="headerlink" title="为什么 v-for 和 v-if 不建议用在一起"></a>为什么 v-for 和 v-if 不建议用在一起</h3><ul><li>当 v-for 和 v-if 处于同一个节点时，v-for 的优先级比 v-if 更高，这意味着 v-if 将分别重复运行于每个 v-for 循环中。如果要遍历的数组很大，而真正要展示的数据很少时，这将造成很大的性能浪费</li><li>这种场景建议使用 computed，先对数据进行过滤</li></ul><h3 id="组件中的data为什么是一个函数？"><a href="#组件中的data为什么是一个函数？" class="headerlink" title="组件中的data为什么是一个函数？"></a>组件中的data为什么是一个函数？</h3><ul><li>一个组件被复用多次的话，也就会创建多个实例。本质上，这些实例用的都是同一个构造函数。</li><li>如果data是对象的话，对象属于引用类型，会影响到所有的实例。所以为了保证组件不同的实例之间data不冲突，data必须是一个函数。</li></ul><h3 id="子组件为什么不可以修改父组件传递的Prop？怎么理解vue的单向数据流？"><a href="#子组件为什么不可以修改父组件传递的Prop？怎么理解vue的单向数据流？" class="headerlink" title="子组件为什么不可以修改父组件传递的Prop？怎么理解vue的单向数据流？"></a>子组件为什么不可以修改父组件传递的Prop？怎么理解vue的单向数据流？</h3><ul><li><p>Vue提倡单向数据流,即父级props的更新会流向子组件,但是反过来则不行。</p></li><li><p>这是为了防止意外的改变父组件状态，使得应用的数据流变得难以理解。</p></li><li><p>如果破坏了单向数据流，当应用复杂时，debug 的成本会非常高。</p><h3 id="v-model是如何实现双向绑定的？"><a href="#v-model是如何实现双向绑定的？" class="headerlink" title="v-model是如何实现双向绑定的？"></a>v-model是如何实现双向绑定的？</h3></li><li><p>v-model是用来在表单控件或者组件上创建双向绑定的</p></li><li><p>他的本质是v-bind和v-on的语法糖</p></li><li><p>在一个组件上使用v-model，默认会为组件绑定名为value的prop和名为input的事件</p></li></ul><h3 id="nextTick的实现原理是什么？"><a href="#nextTick的实现原理是什么？" class="headerlink" title="nextTick的实现原理是什么？"></a>nextTick的实现原理是什么？</h3><ul><li>在下次 DOM 更新循环结束之后执行延迟回调，在修改数据之后立即使用 nextTick 来获取更新后的 DOM。</li><li>nextTick主要使用了宏任务和微任务。</li><li>根据执行环境分别尝试采用Promise、MutationObserver、setImmediate，如果以上都不行则采用setTimeout定义了一个异步方法，多次调用nextTick会将方法存入队列中，通过这个异步方法清空当前队列。</li></ul><h3 id="Vue不能检测数组的哪些变动？Vue-怎么用-vm-set-解决对象新增属性不能响应的问题-？"><a href="#Vue不能检测数组的哪些变动？Vue-怎么用-vm-set-解决对象新增属性不能响应的问题-？" class="headerlink" title="Vue不能检测数组的哪些变动？Vue 怎么用 vm.$set() 解决对象新增属性不能响应的问题 ？"></a>Vue不能检测数组的哪些变动？Vue 怎么用 vm.$set() 解决对象新增属性不能响应的问题 ？</h3><ul><li>Vue 不能检测以下数组的变动：<ul><li>当你利用索引直接设置一个数组项时，例如：vm.items[indexOfItem] = newValue</li><li>当你修改数组的长度时，例如：vm.items.length = newLength</li><li>解决办法：<ul><li>第一类问题:  <pre><code class="hljs js"><span class="hljs-comment">// 法一：Vue.set</span>Vue.set(vm.items, indexOfItem, newValue)<span class="hljs-comment">// 法二：Array.prototype.splice</span>vm.items.splice(indexOfItem, <span class="hljs-number">1</span>, newValue)</code></pre></li><li>第二类问题，可使用 splice:  <pre><code class="hljs js">vm.items.splice(newLength)</code></pre></li></ul></li></ul></li></ul><p>vm.$set 的实现原理是：</p><ul><li>如果目标是数组，直接使用数组的 splice 方法触发相应式；</li><li>如果目标是对象，会先判读属性是否存在、对象是否是响应式，最终如果要对属性进行响应式处理，则是通过调用 defineReactive 方法进行响应式处理（ defineReactive 方法就是 Vue 在初始化对象时，给对象属性采用 Object.defineProperty 动态添加 getter 和 setter 的功能所调用的方法）</li></ul><h3 id="Vue事件绑定原理是什么？"><a href="#Vue事件绑定原理是什么？" class="headerlink" title="Vue事件绑定原理是什么？"></a>Vue事件绑定原理是什么？</h3><ul><li>原生事件绑定是通过addEventListener绑定给真实元素的，组件事件绑定是通过Vue自定义的$on实现的。</li></ul><h3 id="说一下虚拟Dom以及key属性的作用"><a href="#说一下虚拟Dom以及key属性的作用" class="headerlink" title="说一下虚拟Dom以及key属性的作用"></a>说一下虚拟Dom以及key属性的作用</h3><ul><li>由于在浏览器中操作DOM是很昂贵的。频繁的操作DOM，会产生一定的性能问题。这就是虚拟Dom的产生原因。</li><li>Virtual DOM本质就是用一个原生的JS对象去描述一个DOM节点。是对真实DOM的一层抽象。(也就是源码中的VNode类，它定义在src/core/vdom/vnode.js中。)</li><li>虚拟 DOM 的实现原理主要包括以下 3 部分：<ul><li>用 JavaScript 对象模拟真实 DOM 树，对真实 DOM 进行抽象；</li><li>diff 算法 — 比较两棵虚拟 DOM 树的差异；</li><li>pach 算法 — 将两个虚拟 DOM 对象的差异应用到真正的 DOM 树。</li></ul></li><li>key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速<ul><li>更准确：因为带 key 就不是就地复用了，在 sameNode 函数a.key === b.key对比中可以避免就地复用的情况。所以会更加准确。</li><li>更快速：利用 key 的唯一性生成 map 对象来获取对应节点，比遍历方式更快</li></ul></li></ul><h3 id="为什么不建议用index作为key"><a href="#为什么不建议用index作为key" class="headerlink" title="为什么不建议用index作为key?"></a>为什么不建议用index作为key?</h3><ul><li>不建议 用index 作为 key，和没写基本上没区别，因为不管你数组的顺序怎么颠倒，index 都是 0, 1, 2 这样排列，导致 Vue 会复用错误的旧子节点，做很多额外的工作</li></ul><h2 id="生命周期篇"><a href="#生命周期篇" class="headerlink" title="生命周期篇"></a>生命周期篇</h2><h3 id="说一下你对Vue的生命周期的理解"><a href="#说一下你对Vue的生命周期的理解" class="headerlink" title="说一下你对Vue的生命周期的理解"></a>说一下你对Vue的生命周期的理解</h3><ul><li><p>简单回答</p><ul><li>beforeCreate、created、beforeMount、mounted、beforeUpdate、updated、beforeDestroy、destroyed。</li><li>keep-alive 有自己独立的钩子函数 activated 和 deactivated。</li></ul></li><li><p>复杂回答</p></li></ul><table><thead><tr><th>生命周期</th><th>发生了什么</th></tr></thead><tbody><tr><td>beforeCreate</td><td>在当前阶段data、methods、computed以及watch上的数据和方法都不能被访问</td></tr><tr><td>created</td><td>在实例创建完成后发生，当前阶段已经完成了数据观测，也就是可以使用数据，更改数据，在这里更改数据不会触发updated函数。可以做一些初始数据的获取，在当前阶段无法与Dom进行交互，如果非要想，可以通过vm.$nextTick来访问Dom</td></tr><tr><td>beforeMount</td><td>发生在挂载之前，在这之前template模板已导入渲染函数编译。而当前阶段虚拟Dom已经创建完成，即将开始渲染。在此时也可以对数据进行更改，不会触发updated</td></tr><tr><td>mounted</td><td>在挂载完成后发生，在当前阶段，真实的Dom挂载完毕，数据完成双向绑定，可以访问到Dom节点，使用$refs属性对Dom进行操作</td></tr><tr><td>beforeUpdate</td><td>发生在更新之前，也就是响应式数据发生更新，虚拟dom重新渲染之前被触发，你可以在当前阶段进行更改数据，不会造成重渲染</td></tr><tr><td>updated</td><td>发生在更新完成之后，当前阶段组件Dom已完成更新。要注意的是避免在此期间更改数据，因为这可能会导致无限循环的更新</td></tr><tr><td>beforeDestroy</td><td>发生在实例销毁之前，在当前阶段实例完全可以被使用，我们可以在这时进行善后收尾工作，比如清除计时器</td></tr><tr><td>destroyed</td><td>发生在实例销毁之后，这个时候只剩下了dom空壳。组件已被拆解，数据绑定被卸除，监听被移出，子实例也统统被销毁</td></tr><tr><td>activited keep-alive 专属</td><td>组件被激活时调用</td></tr><tr><td>deactivated keep-alive 专属</td><td>组件被销毁时调用</td></tr></tbody></table><h3 id="Vue中组件生命周期调用顺序是什么样的？"><a href="#Vue中组件生命周期调用顺序是什么样的？" class="headerlink" title="Vue中组件生命周期调用顺序是什么样的？"></a>Vue中组件生命周期调用顺序是什么样的？</h3><ul><li>组件的调用顺序都是先父后子,渲染完成的顺序是先子后父。</li><li>组件的销毁操作是先父后子，销毁完成的顺序是先子后父。</li></ul><h3 id="在什么阶段才能访问操作DOM？"><a href="#在什么阶段才能访问操作DOM？" class="headerlink" title="在什么阶段才能访问操作DOM？"></a>在什么阶段才能访问操作DOM？</h3><ul><li>在钩子函数 mounted 被调用前，Vue 已经将编译好的模板挂载到页面上，所以在 mounted 中可以访问操作 DOM。</li></ul><h3 id="你的接口请求一般放在哪个生命周期中？"><a href="#你的接口请求一般放在哪个生命周期中？" class="headerlink" title="你的接口请求一般放在哪个生命周期中？"></a>你的接口请求一般放在哪个生命周期中？</h3><ul><li>可以在钩子函数 created、beforeMount、mounted 中进行调用，因为在这三个钩子函数中，data 已经创建，可以将服务端端返回的数据进行赋值。</li><li>但是推荐在 created 钩子函数中调用异步请求，因为在 created 钩子函数中调用异步请求有以下优点：<ul><li>能更快获取到服务端数据，减少页面loading 时间；</li><li>ssr不支持 beforeMount 、mounted 钩子函数，所以放在 created 中有助于一致性；</li></ul></li></ul><h2 id="路由篇"><a href="#路由篇" class="headerlink" title="路由篇"></a>路由篇</h2><h3 id="vue路由hash模式和history模式实现原理分别是什么，他们的区别是什么？"><a href="#vue路由hash模式和history模式实现原理分别是什么，他们的区别是什么？" class="headerlink" title="vue路由hash模式和history模式实现原理分别是什么，他们的区别是什么？"></a>vue路由hash模式和history模式实现原理分别是什么，他们的区别是什么？</h3><ul><li>hash 模式：<ul><li>后面 hash 值的变化，不会导致浏览器向服务器发出请求，浏览器不发出请求，就不会刷新页面</li><li>通过监听 hashchange 事件可以知道 hash 发生了哪些变化，然后根据 hash 变化来实现更新页面部分内容的操作。</li></ul></li><li>history 模式：<ul><li>history 模式的实现，主要是 HTML5 标准发布的两个 API，pushState 和 replaceState，这两个 API 可以在改变 url，但是不会发送请求。这样就可以监听 url 变化来实现更新页面部分内容的操作</li></ul></li><li>区别<ul><li>url 展示上，hash 模式有“#”，history 模式没有</li><li>刷新页面时，hash 模式可以正常加载到 hash 值对应的页面，而 history 没有处理的话，会返回 404，一般需要后端将所有页面都配置重定向到首页路由</li><li>兼容性， hash 可以支持低版本浏览器和 IE。</li></ul></li></ul><h3 id="路由懒加载是什么意思？如何实现路由懒加载？"><a href="#路由懒加载是什么意思？如何实现路由懒加载？" class="headerlink" title="路由懒加载是什么意思？如何实现路由懒加载？"></a>路由懒加载是什么意思？如何实现路由懒加载？</h3><ul><li>路由懒加载的含义：把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件</li><li>实现：结合 Vue 的异步组件和 Webpack 的代码分割功能<ol><li>可以将异步组件定义为返回一个 Promise 的工厂函数 (该函数返回的 Promise 应该 resolve 组件本身)<pre><code class="hljs js"><span class="hljs-keyword">const</span> Foo = <span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">Promise</span>.resolve(&#123; <span class="hljs-comment">/* 组件定义对象 */</span> &#125;)</code></pre></li><li>在 Webpack 2 中，我们可以使用动态 import语法来定义代码分块点 (split point)<pre><code class="hljs js"><span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./Foo.vue&#x27;</span>) <span class="hljs-comment">// 返回 Promise</span></code></pre></li><li>结合这两者，这就是如何定义一个能够被 Webpack 自动代码分割的异步组件<pre><code class="hljs js"><span class="hljs-keyword">const</span> Foo = <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-string">&#x27;./Foo.vue&#x27;</span>)<span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123; <span class="hljs-attr">routes</span>: [ &#123; <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/foo&#x27;</span>, <span class="hljs-attr">component</span>: Foo &#125; ]&#125;)</code></pre></li></ol></li><li>使用命名 chunk，和webpack中的魔法注释就可以把某个路由下的所有组件都打包在同个异步块 (chunk) 中<pre><code class="hljs js"><span class="hljs-keyword">const</span> Foo = <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;group-foo&quot; */</span> <span class="hljs-string">&#x27;./Foo.vue&#x27;</span>)</code></pre></li></ul><h3 id="Vue-router-导航守卫有哪些"><a href="#Vue-router-导航守卫有哪些" class="headerlink" title="Vue-router 导航守卫有哪些"></a>Vue-router 导航守卫有哪些</h3><ul><li>全局前置/钩子：beforeEach、beforeResolve、afterEach</li><li>路由独享的守卫：beforeEnter</li><li>组件内的守卫：beforeRouteEnter、beforeRouteUpdate、beforeRouteLeave</li></ul><h2 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h2><h3 id="说说vue和react的异同"><a href="#说说vue和react的异同" class="headerlink" title="说说vue和react的异同"></a>说说vue和react的异同</h3><ul><li>同<ul><li>使用 Virtual DOM提供了响应式 (Reactive) 和组件化 (Composable) 的视图组件。将注意力集中保持在核心库，而将其他功能如路由和全局状态管理交给相关的库。</li></ul></li><li>异<ul><li>在 React 应用中，当某个组件的状态发生变化时，它会以该组件为根，重新渲染整个组件子树（除非使用PureComponent/shouldComponentUpdate），在 Vue 应用中，组件的依赖是在渲染过程中自动追踪的，所以系统能精确知晓哪个组件确实需要被重渲染在 </li><li>React 中，一切都是 JavaScript。不仅仅是 HTML 可以用 JSX 来表达，现在的潮流也越来越多地将 CSS 也纳入到 JavaScript 中来处理</li><li>Vue 的路由库和状态管理库都是由官方维护支持且与核心库同步更新的。React 则是选择把这些问题交给社区维护，因此创建了一个更分散的生态系统，所以有更丰富的生态系统</li><li>Vue 提供了CLI 脚手架，能让你通过交互式的脚手架引导非常容易地构建项目。你甚至可以使用它快速开发组件的原型。React 在这方面也提供了create-react-app，但是现在还存在一些局限性</li><li>React Native 能使你用相同的组件模型编写有本地渲染能力的 APP，Vue 和Weex会进行官方合作，Weex 是阿里巴巴发起的跨平台用户界面开发框架，同时也正在 Apache 基金会进行项目孵化，另一个选择是NativeScript-Vue，一个用 Vue.js 构建完全原生应用的NativeScript插件</li></ul></li></ul><h3 id="什么是-mixin-？"><a href="#什么是-mixin-？" class="headerlink" title="什么是 mixin ？"></a>什么是 mixin ？</h3><ul><li>Mixin 使我们能够为 Vue 组件编写可插拔和可重用的功能。</li><li>如果你希望再多个组件之间重用一组组件选项，例如生命周期 hook、 方法等，则可以将其编写为 mixin，并在组件中简单的引用它。</li><li>然后将 mixin 的内容合并到组件中。如果你要在 mixin 中定义生命周期 hook，那么它在执行时将优化于组件自已的 hook。</li></ul><h3 id="在-Vue-实例中编写生命周期-hook-或其他-option-properties-时，为什么不使用箭头函数-？"><a href="#在-Vue-实例中编写生命周期-hook-或其他-option-properties-时，为什么不使用箭头函数-？" class="headerlink" title="在 Vue 实例中编写生命周期 hook 或其他 option/properties 时，为什么不使用箭头函数 ？"></a>在 Vue 实例中编写生命周期 hook 或其他 option/properties 时，为什么不使用箭头函数 ？</h3><ul><li>箭头函数自已没有定义 this 上下文中。</li><li>当你在 Vue 程序中使用箭头函数 ( =&gt; ) 时，this 关键字病不会绑定到 Vue 实例，因此会引发错误。所以强烈建议改用标准函数声明。</li></ul><h3 id="Vue模版编译原理知道吗，能简单说一下吗？"><a href="#Vue模版编译原理知道吗，能简单说一下吗？" class="headerlink" title="Vue模版编译原理知道吗，能简单说一下吗？"></a>Vue模版编译原理知道吗，能简单说一下吗？</h3><p>简单说，Vue的编译过程就是将template转化为render函数的过程。会经历以下阶段（生成AST树/优化/codegen）：</p><ul><li>首先解析模版，生成AST语法树(一种用JavaScript对象的形式来描述整个模板)。 使用大量的正则表达式对模板进行解析，遇到标签、文本的时候都会执行对应的钩子进行相关处理。</li><li>Vue的数据是响应式的，但其实模板中并不是所有的数据都是响应式的。有一些数据首次渲染后就不会再变化，对应的DOM也不会变化。那么优化过程就是深度遍历AST树，按照相关条件对树节点进行标记。这些被标记的节点(静态节点)我们就可以跳过对它们的比对，对运行时的模板起到很大的优化作用。</li><li>编译的最后一步是将优化后的AST树转换为可执行的代码。</li></ul><h3 id="diff算法说一下"><a href="#diff算法说一下" class="headerlink" title="diff算法说一下"></a>diff算法说一下</h3><ul><li>同级比较，再比较子节点</li><li>先判断一方有子节点一方没有子节点的情况(如果新的children没有子节点，将旧的子节点移除)</li><li>比较都有子节点的情况(核心diff)</li><li>递归比较子节点</li></ul><h3 id="说说你对keep-alive组件的了解"><a href="#说说你对keep-alive组件的了解" class="headerlink" title="说说你对keep-alive组件的了解"></a>说说你对keep-alive组件的了解</h3><ul><li>keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，避免重新渲染 ，其有以下特性：</li><li>一般结合路由和动态组件一起使用，用于缓存组件；</li><li>提供 include 和 exclude 属性，两者都支持字符串或正则表达式， include 表示只有名称匹配的组件会被缓存，exclude 表示任何名称匹配的组件都不会被缓存 ，其中 exclude 的优先级比 include 高；</li><li>对应两个钩子函数 activated 和 deactivated ，当组件被激活时，触发钩子函数 activated，当组件被移除时，触发钩子函数 deactivated。</li></ul><h3 id="说说你对SSR的了解"><a href="#说说你对SSR的了解" class="headerlink" title="说说你对SSR的了解"></a>说说你对SSR的了解</h3><ul><li>SSR也就是服务端渲染，也就是将Vue在客户端把标签渲染成HTML的工作放在服务端完成，然后再把html直接返回给客户端</li><li>SSR的优势<ul><li>更好的SEO</li><li>首屏加载速度更快</li></ul></li><li>SSR的缺点<ul><li>开发条件会受到限制，服务器端渲染只支持beforeCreate和created两个钩子</li><li>当我们需要一些外部扩展库时需要特殊处理，服务端渲染应用程序也需要处于Node.js的运行环境</li><li>更多的服务端负载</li></ul></li></ul><h3 id="你都做过哪些Vue的性能优化？"><a href="#你都做过哪些Vue的性能优化？" class="headerlink" title="你都做过哪些Vue的性能优化？"></a>你都做过哪些Vue的性能优化？</h3><ul><li><p>编码阶段</p><ul><li>尽量减少data中的数据，data中的数据都会增加getter和setter，会收集对应的watcher</li><li>v-if和v-for不能连用</li><li>如果需要使用v-for给每项元素绑定事件时使用事件代理</li><li>SPA 页面采用keep-alive缓存组件</li><li>在更多的情况下，使用v-if替代v-show</li><li>key保证唯一</li><li>使用路由懒加载、异步组件</li><li>防抖、节流</li><li>第三方模块按需导入</li><li>长列表滚动到可视区域动态加载</li><li>图片懒加载</li></ul></li><li><p>SEO优化</p><ul><li>预渲染</li><li>服务端渲染SSR</li></ul></li><li><p>打包优化</p><ul><li>压缩代码</li><li>Tree Shaking/Scope Hoisting</li><li>使用cdn加载第三方模块</li><li>多线程打包happypack</li><li>splitChunks抽离公共文件</li><li>sourceMap优化</li></ul></li><li><p>用户体验</p><ul><li>骨架屏</li><li>PWA</li><li>还可以使用缓存(客户端缓存、服务端缓存)优化、服务端开启gzip压缩等。</li></ul></li><li><p>vue2.x中如何监测数组变化？</p><ul><li>使用了函数劫持的方式，重写了数组的方法，Vue将data中的数组进行了原型链重写，指向了自己定义的数组原型方法，当调用数组api时，可以通知依赖更新。</li><li>如果数组中包含着引用类型，会对数组中的引用类型再次递归遍历进行监控。这样就实现了监测数组变化。</li></ul></li></ul><h3 id="说说你对-SPA-单页面的理解，它的优缺点分别是什么？"><a href="#说说你对-SPA-单页面的理解，它的优缺点分别是什么？" class="headerlink" title="说说你对 SPA 单页面的理解，它的优缺点分别是什么？"></a>说说你对 SPA 单页面的理解，它的优缺点分别是什么？</h3><ul><li>SPA（ single-page application ）仅在 Web 页面初始化时加载相应的 HTML、JavaScript 和 CSS。一旦页面加载完成，SPA 不会因为用户的操作而进行页面的重新加载或跳转；取而代之的是利用路由机制实现 HTML 内容的变换，UI 与用户的交互，避免页面的重新加载。</li><li>优点：<ul><li>用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染；</li><li>基于上面一点，SPA 相对对服务器压力小；</li><li>前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理；</li></ul></li><li>缺点：<ul><li>初次加载耗时多：为实现单页 Web 应用功能及显示效果，需要在加载页面的时候将 JavaScript、CSS 统一加载，部分页面按需加载；</li><li>前进后退路由管理：由于单页应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理；</li><li>SEO 难度较大：由于所有的内容都在一个页面中动态替换显示，所以在 SEO 上其有着天然的弱势。</li></ul></li></ul><h3 id="对于即将到来的-vue3-0-特性你有什么了解的吗？"><a href="#对于即将到来的-vue3-0-特性你有什么了解的吗？" class="headerlink" title="对于即将到来的 vue3.0 特性你有什么了解的吗？"></a>对于即将到来的 vue3.0 特性你有什么了解的吗？</h3><ul><li><p>监测机制的改变</p><ul><li>3.0 将带来基于代理 Proxy的 observer 实现，提供全语言覆盖的反应性跟踪。</li><li>消除了 Vue 2 当中基于 Object.defineProperty 的实现所存在的很多限制：</li></ul></li><li><p>只能监测属性，不能监测对象</p><ul><li>检测属性的添加和删除；</li><li>检测数组索引和长度的变更；</li><li>支持 Map、Set、WeakMap 和 WeakSet。</li></ul></li><li><p>模板</p><ul><li>模板方面没有大的变更，只改了作用域插槽，2.x 的机制导致作用域插槽变了，父组件会重新渲染，而 3.0 把作用域插槽改成了函数的方式，这样只会影响子组件的重新渲染，提升了渲染的性能。</li><li>同时，对于 render 函数的方面，vue3.0 也会进行一系列更改来方便习惯直接使用 api 来生成 vdom 。</li></ul></li><li><p>对象式的组件声明方式</p><ul><li>vue2.x 中的组件是通过声明的方式传入一系列 option，和 TypeScript 的结合需要通过一些装饰器的方式来做，虽然能实现功能，但是比较麻烦。</li><li>3.0 修改了组件的声明方式，改成了类式的写法，这样使得和 TypeScript 的结合变得很容易</li></ul></li><li><p>其它方面的更改</p><ul><li>支持自定义渲染器，从而使得 weex 可以通过自定义渲染器的方式来扩展，而不是直接 fork 源码来改的方式。</li><li>支持 Fragment（多个根节点）和 Protal（在 dom 其他部分渲染组建内容）组件，针对一些特殊的场景做了处理。</li><li>基于 tree shaking 优化，提供了更多的内置功能。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>框架、库学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数柯里化及应用</title>
    <link href="/2019/09/25/write-code%20/%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
    <url>/2019/09/25/write-code%20/%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>我们在各种算法题以及技术文档中经常会看到柯里化这个词，那么，柯里化到底是什么？它在 js 中如何运用？对我们的编程有什么作用？都 9102 年了，如果你还不知道这些，那么你在面试过程中很可能会被面试官 diss🙄</p><a id="more"></a><hr><h3 id="什么是柯里化（Currying）"><a href="#什么是柯里化（Currying）" class="headerlink" title="什么是柯里化（Currying）"></a>什么是柯里化（Currying）</h3><p><em>维基百科</em>的<a href="https://links.jianshu.com/go?to=https://zh.wikipedia.org/wiki/%25E6%259F%25AF%25E9%2587%258C%25E5%258C%2596">解释</a>是：把接收多个参数的函数变换成接收一个单一参数（最初函数的第一个参数）的函数，并返回接受剩余的参数而且返回结果的新函数的技术。其由数学家 Haskell Brooks Curry 提出，并以 curry 命名。</p><p>简单的说，柯里化函数持续地返回一个新函数直到所有的参数用尽为止。这些参数全部保持 “活着” 的状态（通过闭包），然后当柯里化链中的最后一个函数被返回和执行时会全部被用来执行。</p><p>这和<a href="https://links.jianshu.com/go?to=https://react.docschina.org/docs/higher-order-components.html">高阶组件</a>（Higher-order functions）如出一辙。前者返回一个新函数，后者返回一个新组件。</p><h3 id="举个简单的栗子"><a href="#举个简单的栗子" class="headerlink" title="举个简单的栗子"></a>举个简单的栗子</h3><p>本例使用到的部分 ES6 知识：<a href="https://links.jianshu.com/go?to=http://es6.ruanyifeng.com/%23docs/let">const</a>，<a href="https://links.jianshu.com/go?to=http://es6.ruanyifeng.com/%23docs/function">arrow function</a>。不了解的同学可先行查看。<br>写一个计算三个参数相乘的函数：</p><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">multiply</span> (<span class="hljs-params">a, b, c</span>) </span>&#123;  <span class="hljs-keyword">return</span> a * b * c&#125;multiply(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)</code></pre><p>这是我们第一反应写出来的 demo，也是看起来最简单的实现方法。再来创建一个柯里化版本的函数：</p><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">multiply</span> (<span class="hljs-params">a</span>) </span>&#123;  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">b</span>) =&gt;</span> &#123;    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">c</span>) =&gt;</span> &#123;      <span class="hljs-keyword">return</span> a * b * c    &#125;  &#125;&#125;multiply(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>)</code></pre><p>这里我们将 multiply(1，2，3) 调用变成了 multiply (1) (2) (3) 调用。<br>单独一个函数被转换成了一系列函数。为了得到数字 1、2、3 相乘的结果，这些数字被一个接一个地传递，每个数字预填了下一个函数内联调用。</p><p>我们把 multiply (1) (2) (3) 分割一下来帮助理解：</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> mul1 = multiply(<span class="hljs-number">1</span>)<span class="hljs-keyword">const</span> mul2 = mul1(<span class="hljs-number">2</span>)<span class="hljs-keyword">const</span> result = mul2(<span class="hljs-number">3</span>)<span class="hljs-built_in">console</span>.log(result)</code></pre><p>当 mul2 使用 3 作为参数调用时，它一起使用了之前已拿到的参数 a=1 和 b=2 进行运算并返回结果 6。</p><p>作为一个嵌套函数，mul2 能够访问到外部的两个函数 multiply 和 mul1 的作用域。这就是为什么 mul2 能利用定义在已经‘离场’的函数中的参数来进行乘法操作的原因。即使这些函数早已返回并且从内存中垃圾回收了，但其变量仍然保持‘活着’(<a href="https://links.jianshu.com/go?to=https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143449934543461c9d5dfeeb848f5b72bd012e1113d15000">闭包</a>)。你可以看到 3 个数字每次只有 1 个提供给函数，并且同一时间里一个新函数会被返回，直到所有的数字用尽为止。</p><p><strong>柯里化背后的逻辑就是获取一个函数并派生出一个返回特殊函数的函数</strong>，它实际上是一种思想，或者说是一种程序设计模式。</p><h3 id="柯里化的应用"><a href="#柯里化的应用" class="headerlink" title="柯里化的应用"></a>柯里化的应用</h3><h4 id="1-编写可以轻松复用和配置的小代码块，就像我们使用-npm-一样："><a href="#1-编写可以轻松复用和配置的小代码块，就像我们使用-npm-一样：" class="headerlink" title="1. 编写可以轻松复用和配置的小代码块，就像我们使用 npm 一样："></a>1. 编写可以轻松复用和配置的小代码块，就像我们使用 npm 一样：</h4><p>举个例子，你有一家商店，然后你想给你的优惠顾客 10% 的折扣：</p><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">discount</span> (<span class="hljs-params">price, discount</span>) </span>&#123;  <span class="hljs-keyword">return</span> price * discount&#125;<span class="hljs-keyword">const</span> price = discount(<span class="hljs-number">500</span>, <span class="hljs-number">0.1</span>) <span class="hljs-keyword">const</span> price = discount(<span class="hljs-number">1500</span>, <span class="hljs-number">0.1</span>) <span class="hljs-keyword">const</span> price = discount(<span class="hljs-number">2000</span>, <span class="hljs-number">0.1</span>) <span class="hljs-keyword">const</span> price = discount(<span class="hljs-number">50</span>, <span class="hljs-number">0.1</span>) <span class="hljs-keyword">const</span> price = discount(<span class="hljs-number">300</span>, <span class="hljs-number">0.1</span>) <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">discount</span> (<span class="hljs-params">discount</span>) </span>&#123;  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">price</span>) =&gt;</span> &#123;    <span class="hljs-keyword">return</span> price * discount  &#125;&#125;<span class="hljs-keyword">const</span> tenPercentDiscount = discount(<span class="hljs-number">0.1</span>)tenPercentDiscount(<span class="hljs-number">500</span>) <span class="hljs-keyword">const</span> twentyPercentDiscount = discount(<span class="hljs-number">0.2</span>)twentyPercentDiscount(<span class="hljs-number">500</span>) twentyPercentDiscount(<span class="hljs-number">3000</span>) twentyPercentDiscount(<span class="hljs-number">80000</span>)</code></pre><p>这个例子说明，使用柯里化思想能让我们在遇到只能确定一个参数而无法确定另一个参数时，代码设计编的变得更方便与高效，达到提升性能的目的。</p><h4 id="2-避免频繁调用具有相同参数的函数："><a href="#2-避免频繁调用具有相同参数的函数：" class="headerlink" title="2. 避免频繁调用具有相同参数的函数："></a>2. 避免频繁调用具有相同参数的函数：</h4><p>比如我们有个用来计算体积的函数:</p><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">volume</span> (<span class="hljs-params">l, w, h</span>) </span>&#123;  <span class="hljs-keyword">return</span> l * w * h&#125;volume(<span class="hljs-number">200</span>, <span class="hljs-number">30</span>, <span class="hljs-number">100</span>) volume(<span class="hljs-number">32</span>, <span class="hljs-number">45</span>, <span class="hljs-number">100</span>) volume(<span class="hljs-number">2322</span>, <span class="hljs-number">232</span>, <span class="hljs-number">100</span>) <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">volume</span> (<span class="hljs-params">h</span>) </span>&#123;  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">w</span>) =&gt;</span> &#123;    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">l</span>) =&gt;</span> &#123;      <span class="hljs-keyword">return</span> l * w * h    &#125;  &#125;&#125;<span class="hljs-keyword">const</span> hCylinderHeight = volume(<span class="hljs-number">100</span>)hCylinderHeight(<span class="hljs-number">200</span>)(<span class="hljs-number">30</span>) hCylinderHeight(<span class="hljs-number">2322</span>)(<span class="hljs-number">232</span>)</code></pre><h3 id="通用的柯里函数"><a href="#通用的柯里函数" class="headerlink" title="通用的柯里函数"></a>通用的柯里函数</h3><p>让我们建立一个函数来接受任何函数并且返回柯里化版本的函数：</p><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">curry</span> (<span class="hljs-params">fn, ...args</span>) </span>&#123;  <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">..._args</span>) =&gt;</span> &#123;    <span class="hljs-keyword">return</span> fn(...args, ..._args)  &#125;&#125;</code></pre><p>我们在这里做了什么？我们的 curry 函数接受一个我们想要柯里化的函数（fn）和一个变量（…args）。这里的 rest 操作符用来将参数聚集成一个…args。接下来我们返回一个函数，该函数将其余参数收集为…<em>args。此函数通过 spread 运算符将… args 和…</em> args 作为参数解构传入来调用原始函数 fn，然后将值返回给用户。</p><p>让我们使用我们的 curry 函数用之前的例子来创建一个特殊的函数（一个专门用来计算 100m 长度的物品体积）：</p><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">volume</span> (<span class="hljs-params">l, h, w</span>) </span>&#123;  <span class="hljs-keyword">return</span> l * h * w&#125;<span class="hljs-keyword">const</span> hCy = curry(volume, <span class="hljs-number">100</span>)hCy(<span class="hljs-number">200</span>, <span class="hljs-number">900</span>) hCy(<span class="hljs-number">70</span>, <span class="hljs-number">60</span>)</code></pre><p>将类似回调函数的参数传入柯里化函数，能使复杂的问题变得简单！</p><h3 id="使用递归实现-curry-函数"><a href="#使用递归实现-curry-函数" class="headerlink" title="使用递归实现 curry 函数"></a>使用递归实现 curry 函数</h3><p>JS 柯里化作为函数式编程的重要一环，频繁在算法题中出现。以上的通用柯里化函数还不够完善，我们希望只给 curry 函数传递一个 fn 就能达到目的，现在我们使用递归来实现：</p><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">curry</span>(<span class="hljs-params">fn</span>) </span>&#123;  <span class="hljs-keyword">const</span> c = <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> (args.length === fn.length) ?          fn(...args) : <span class="hljs-function">(<span class="hljs-params">..._args</span>) =&gt;</span> c(...args, ..._args)  <span class="hljs-keyword">return</span> c&#125;</code></pre><p>该方法几乎为最简洁、代码行数最少的实现方法了。<br>首先我们能确定，实现柯里化的核心就是要确定传入参数的个数，并通通取到。<br>其次，我们得知道，<code>fn.length</code>为 fn 函数接受的参数个数，那么该实现方法就能解读为：<br><strong>不断递归获取传入参数，直到取到的参数个数等于 fn 的参数个数为止，最终将获取到的所有参数传给 fn 并返回执行结果</strong>。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>柯里化作为一种重要的程序思想，已经广为应用，它使我们应对复杂问题时能提升效率，增强可读性。希望读者都能体会这种思想并运用于实践，相信在提升技术的路上能越走越远，成为一名优秀的工程师！</p><p><a href="https://www.jianshu.com/p/7fa99a4bee8b">原文地址</a></p><h3 id="由浅入深的柯里化"><a href="#由浅入深的柯里化" class="headerlink" title="由浅入深的柯里化"></a>由浅入深的柯里化</h3><p>在前端面试中有一个关于柯里化的面试题，流传甚广。</p><blockquote><p>实现一个add方法，使计算结果能够满足如下预期：<br>add(1)(2)(3) = 6<br>add(1, 2)(3, 4) = 10<br>add(1)(2)(3)(4)(5) = 15</p></blockquote><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">...args</span>) </span>&#123;    <span class="hljs-comment">// 在内部声明一个函数，利用闭包的特性保存args并收集所有的参数值</span>    <span class="hljs-keyword">let</span> allArgs = args;    <span class="hljs-keyword">const</span> adder = <span class="hljs-function">() =&gt;</span> &#123;        <span class="hljs-keyword">const</span> setter = <span class="hljs-function">(<span class="hljs-params">...setterArgs</span>) =&gt;</span> &#123;            allArgs = allArgs.concat([...setterArgs]);            <span class="hljs-keyword">return</span> setter;        &#125;;        <span class="hljs-comment">// 利用隐式转换的特性，当最后执行时隐式转换，并计算最终的值返回</span>        setter.valueOf = <span class="hljs-function">() =&gt;</span> &#123;            <span class="hljs-keyword">return</span> allArgs.reduce(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> &#123;                <span class="hljs-keyword">return</span> a + b;            &#125;);        &#125;;        <span class="hljs-keyword">return</span> setter;    &#125;;    <span class="hljs-keyword">return</span> adder();&#125;<span class="hljs-comment">// 输出结果，可自由组合的参数</span><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)));  <span class="hljs-comment">// 6</span><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>(add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)));  <span class="hljs-comment">// 10</span><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">Number</span>(add(<span class="hljs-number">1</span>)(<span class="hljs-number">2</span>)(<span class="hljs-number">3</span>)(<span class="hljs-number">4</span>)(<span class="hljs-number">5</span>)));  <span class="hljs-comment">// 15</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>手撕代码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>VueRouter</title>
    <link href="/2018/06/01/vue/VueRouter/"/>
    <url>/2018/06/01/vue/VueRouter/</url>
    
    <content type="html"><![CDATA[<h2 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h2><ul><li>hash</li><li>history</li></ul><h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>带＃</p><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p>需要server支持</p><h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><pre><code class="hljs js"><span class="hljs-keyword">const</span> User = &#123;    template:<span class="hljs-string">&#x27;&lt;div&gt;&#123;&#123;$route.params.id&#125;&#125;&lt;/div&gt;&#x27;</span>&#125;<span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;    routes:[        <span class="hljs-comment">// 动态路径参数 以冒号开头。命中/user/10等格式路由</span>        &#123;<span class="hljs-attr">path</span>:<span class="hljs-string">&#x27;/user/:id&#x27;</span>,<span class="hljs-attr">component</span>:User&#125;    ]&#125;)</code></pre><h2 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h2><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><span class="hljs-keyword">import</span> VueRouter <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue-router&#x27;</span>Vue.use(VueRouter)<span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> VueRouter(&#123; routes: [ &#123; path: <span class="hljs-string">&#x27;/&#x27;</span>, name: <span class="hljs-string">&#x27;Navigator&#x27;</span>, component: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;navigator&quot; */</span> <span class="hljs-string">&#x27;./../components/Navigator&#x27;</span>) &#125;, &#123; path: <span class="hljs-string">&#x27;/tucao&#x27;</span>, name: <span class="hljs-string">&#x27;Tucao&#x27;</span>, component: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;tucao&quot; */</span> <span class="hljs-string">&#x27;./../components/Tucao&#x27;</span>) &#125; ]&#125;)</code></pre><h2 id="路由守卫"><a href="#路由守卫" class="headerlink" title="路由守卫"></a>路由守卫</h2><p>路由钩子函数有三种：</p><ol><li><p>全局钩子： beforeEach、 afterEach</p></li><li><p>单个路由里面的钩子： beforeEnter、 beforeLeave</p></li><li><p>组件路由：beforeRouteEnter、 beforeRouteUpdate、 beforeRouteLeave</p></li></ol><h3 id="全局守卫"><a href="#全局守卫" class="headerlink" title="全局守卫"></a>全局守卫</h3><p>无论访问哪一个路径，都会触发全局的钩子函数，位置是调用router的方法</p><p><strong>router.beforeEach() 进入之前触发</strong></p><p><strong>router.afterEach() 进入之后触发</strong></p><h4 id="beforeEach（全局前置守卫）"><a href="#beforeEach（全局前置守卫）" class="headerlink" title="beforeEach（全局前置守卫）"></a>beforeEach（全局前置守卫）</h4><p>使用 router.beforeEach 注册一个全局前置守卫</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;    ...&#125;)router.beforeEach(<span class="hljs-function">(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>) =&gt;</span> &#123;    <span class="hljs-comment">// do something....   </span>&#125;)</code></pre><p>每个守卫方法接收三个参数：</p><ul><li>to: Route: 即将要进入的目标路由对象（to是一个对象，是将要进入的路由对象，可以用to.path调用路由对象中的属性）</li><li>from: Route: 当前导航正要离开的路由</li><li>next: Function: 这是一个必须需要调用的方法，执行效果依赖 next 方法的调用参数。</li></ul><h5 id="next参数"><a href="#next参数" class="headerlink" title="next参数"></a>next参数</h5><ul><li>next(): 进行管道中的下一个钩子。如果全部钩子执行完了，则导航的状态就是confirmed (确认的)。</li><li>next(false): 中断当前的导航。如果浏览器的 URL 改变了 (可能是用户手动或者浏览器后退按 钮)，那么 URL 地址会重置到 from 路由对应的地址。</li><li>next(‘/‘) 或者 next({ path: ‘/‘ }): 跳转到一个不同的地址。当前的导航被中断，然后进行一个新的导航。你可以向 next 传递任意位置对象，且允许设置诸如 replace: true、name: ‘home’ 之类的选项以及任何用在router-link 的 to prop或router.push中的选项。</li><li>next(error): (2.4.0+) 如果传入 next 的参数是一个 Error 实例，则导航会被终止且该错误会被传递给router.onError()注册过的回调。</li></ul><blockquote><p>确保要调用 next 方法，否则钩子就不会被 resolved。</p></blockquote><h4 id="afterEach（全局后置钩子）"><a href="#afterEach（全局后置钩子）" class="headerlink" title="afterEach（全局后置钩子）"></a>afterEach（全局后置钩子）</h4><pre><code class="hljs js"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;    ...&#125;)router.afterEach(<span class="hljs-function">(<span class="hljs-params">to,<span class="hljs-keyword">from</span></span>)=&gt;</span>&#123;    <span class="hljs-comment">// do something....   </span>&#125;)</code></pre><p>和守卫不同的是，这些钩子不会接受 next 函数也不会改变导航本身</p><h4 id="路由独享的守卫-单个路由独享的"><a href="#路由独享的守卫-单个路由独享的" class="headerlink" title="路由独享的守卫(单个路由独享的)"></a>路由独享的守卫(单个路由独享的)</h4><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> VueRouter(&#123;    routes: [        &#123;            path: <span class="hljs-string">&#x27;/&#x27;</span>,            name: <span class="hljs-string">&#x27;Navigator&#x27;</span>,            beforeEnter:(<span class="hljs-function">(<span class="hljs-params">to,<span class="hljs-keyword">from</span>,next</span>)=&gt;</span>&#123;                <span class="hljs-comment">// do something....   </span>            &#125;),            component: <span class="hljs-function">() =&gt;</span> <span class="hljs-keyword">import</span>(<span class="hljs-comment">/* webpackChunkName: &quot;navigator&quot; */</span> <span class="hljs-string">&#x27;./../components/Navigator&#x27;</span>)        &#125;    ]&#125;)</code></pre><h4 id="组件级路由钩子"><a href="#组件级路由钩子" class="headerlink" title="组件级路由钩子"></a>组件级路由钩子</h4><pre><code class="hljs stylus">&#123;data,methods<span class="hljs-function"><span class="hljs-title">beforeRouteEnter</span><span class="hljs-params">()</span></span>&#123;   <span class="hljs-comment">// this 不指向实例 组件还没创建</span>    next((vm) =&gt;&#123;        <span class="hljs-comment">// vm就是实例</span>    &#125;)&#125;<span class="hljs-function"><span class="hljs-title">beforeRouteUpdate</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-comment">// do something....   </span>&#125;<span class="hljs-function"><span class="hljs-title">beforeRouteLeave</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-comment">// do something....   </span>&#125; &#125;</code></pre><p><img src="/images/pages/luyou1.png" alt="image"><br>beforeRouteEnter 守卫 不能 访问 this，因为守卫在导航确认前被调用,因此即将登场的新组件还没被创建。不过，你可以通过传一个回调给 next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数。</p><p><img src="/images/pages/luyou2.png" alt="image"></p><p>注意~ ： beforeRouteEnter 是支持给 next 传递回调的唯一守卫。对于 beforeRouteUpdate 和 beforeRouteLeave 来说，this 已经可用了，所以不支持传递回调，因为没有必要了。</p><p>这个离开守卫beforeRouteLeave()通常用来禁止用户在还未保存修改前突然离开。该导航可以通过 next(false) 来取消。</p><p><img src="/images/pages/luyou3.png" alt="image"></p><h4 id="完整的导航解析流程："><a href="#完整的导航解析流程：" class="headerlink" title="完整的导航解析流程："></a>完整的导航解析流程：</h4><ol><li><p>导航被触发。</p></li><li><p>在失活的组件里调用离开守卫。</p></li><li><p>调用全局的 beforeEach 守卫。</p></li><li><p>在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。</p></li><li><p>在路由配置里调用 beforeEnter。</p></li><li><p>解析异步路由组件。</p></li><li><p>在被激活的组件里调用 beforeRouteEnter。</p></li><li><p>调用全局的 beforeResolve 守卫 (2.5+)。</p></li><li><p>导航被确认。</p></li><li><p>调用全局的 afterEach 钩子。</p></li><li><p>触发 DOM 更新。</p></li><li><p>用创建好的实例调用 beforeRouteEnter 守卫中传给 next 的回调函数。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>框架、库学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue组件渲染过程</title>
    <link href="/2018/03/11/vue/Vue%E7%BB%84%E4%BB%B6%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B/"/>
    <url>/2018/03/11/vue/Vue%E7%BB%84%E4%BB%B6%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="初次渲染过程"><a href="#初次渲染过程" class="headerlink" title="初次渲染过程"></a>初次渲染过程</h2><ol><li>解析模版为render函数（编译打包时已经完成，开发环境下完成）（vue-loader）</li><li>触发响应式，监听data属性，getter setter</li><li>执行render函数，生成vnode，patch（elem,vnode）</li></ol><h2 id="更新过程"><a href="#更新过程" class="headerlink" title="更新过程"></a>更新过程</h2><ol><li>修改data，触发setter（此前在getter中已经被监听）</li><li>重新执行render函数，生成newVnode</li><li>patch(vnode,newVnode)</li></ol><h2 id="异步渲染过程"><a href="#异步渲染过程" class="headerlink" title="异步渲染过程"></a>异步渲染过程</h2><ol><li>$nextTick</li><li>汇总data的修改一次性更新视图</li><li>修改DOM操作次数，提升性能</li></ol>]]></content>
    
    
    <categories>
      
      <category>框架、库学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue模板编译</title>
    <link href="/2018/02/28/vue/Vue%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91/"/>
    <url>/2018/02/28/vue/Vue%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<h3 id="模版编译"><a href="#模版编译" class="headerlink" title="模版编译"></a>模版编译</h3><ul><li>模版是vue开发中最常用的部分，即与使用相关的原理</li><li>不是html，有指令等</li><li>组件渲染和更新的过程</li></ul><h3 id="js的with语法"><a href="#js的with语法" class="headerlink" title="js的with语法"></a>js的with语法</h3><ul><li>改变{}内自由变量的查找规则，当作obj的属性来查找</li><li>如果找不到匹配的属性，则报错</li><li>with慎用，打破了作用域的规则，易读性差</li></ul><h3 id="vue-template-complier将模版编译为render函数"><a href="#vue-template-complier将模版编译为render函数" class="headerlink" title="vue template complier将模版编译为render函数"></a>vue template complier将模版编译为render函数</h3><pre><code class="hljs js"><span class="hljs-keyword">const</span> compiler = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;vue-template-compiler&#x27;</span>)<span class="hljs-comment">// 插值</span><span class="hljs-keyword">const</span> template = <span class="hljs-string">`&lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;`</span><span class="hljs-comment">// with(this)&#123;return createElement(&#x27;p&#x27;,[createTextVNode(toString(message))])&#125;</span><span class="hljs-comment">// h -&gt; vnode</span><span class="hljs-comment">// createElement -&gt; vnode</span><span class="hljs-comment">// // 表达式</span><span class="hljs-keyword">const</span> template = <span class="hljs-string">`&lt;p&gt;&#123;&#123;flag ? message : &#x27;no message found&#x27;&#125;&#125;&lt;/p&gt;`</span><span class="hljs-comment">// // with(this)&#123;return _c(&#x27;p&#x27;,[_v(_s(flag ? message : &#x27;no message found&#x27;))])&#125;</span><span class="hljs-comment">// // 属性和动态属性</span><span class="hljs-keyword">const</span> template = <span class="hljs-string">`</span><span class="hljs-string">    &lt;div id=&quot;div1&quot; class=&quot;container&quot;&gt;</span><span class="hljs-string">        &lt;img :src=&quot;imgUrl&quot;/&gt;</span><span class="hljs-string">    &lt;/div&gt;</span><span class="hljs-string">`</span><span class="hljs-comment">// with(this)&#123;return _c(&#x27;div&#x27;,</span><span class="hljs-comment">//      &#123;staticClass:&quot;container&quot;,attrs:&#123;&quot;id&quot;:&quot;div1&quot;&#125;&#125;,</span><span class="hljs-comment">//      [</span><span class="hljs-comment">//          _c(&#x27;img&#x27;,&#123;attrs:&#123;&quot;src&quot;:imgUrl&#125;&#125;)])&#125;</span><span class="hljs-comment">// // 条件</span><span class="hljs-keyword">const</span> template = <span class="hljs-string">`</span><span class="hljs-string">    &lt;div&gt;</span><span class="hljs-string">        &lt;p v-if=&quot;flag === &#x27;a&#x27;&quot;&gt;A&lt;/p&gt;</span><span class="hljs-string">        &lt;p v-else-if=&quot;flag === &#x27;b&#x27;&quot;&gt;C&lt;/p&gt;</span><span class="hljs-string">        &lt;p v-else&gt;B&lt;/p&gt;</span><span class="hljs-string">    &lt;/div&gt;</span><span class="hljs-string">`</span><span class="hljs-comment">// with(this)&#123;return _c(&#x27;div&#x27;,[(flag === &#x27;a&#x27;)?_c(&#x27;p&#x27;,[_v(&quot;A&quot;)]):_c(&#x27;p&#x27;,[_v(&quot;B&quot;)])])&#125;</span><span class="hljs-comment">// 循环</span><span class="hljs-keyword">const</span> template = <span class="hljs-string">`</span><span class="hljs-string">    &lt;ul&gt;</span><span class="hljs-string">        &lt;li v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;&#123;&#123;item.title&#125;&#125;&lt;/li&gt;</span><span class="hljs-string">    &lt;/ul&gt;</span><span class="hljs-string">`</span><span class="hljs-comment">// with(this)&#123;return _c(&#x27;ul&#x27;,_l((list),function(item)&#123;return _c(&#x27;li&#x27;,&#123;key:item.id&#125;,[_v(_s(item.title))])&#125;),0)&#125;</span><span class="hljs-comment">// 事件</span><span class="hljs-keyword">const</span> template = <span class="hljs-string">`</span><span class="hljs-string">    &lt;button @click=&quot;clickHandler&quot;&gt;submit&lt;/button&gt;</span><span class="hljs-string">`</span><span class="hljs-comment">// with(this)&#123;return _c(&#x27;button&#x27;,&#123;on:&#123;&quot;click&quot;:clickHandler&#125;&#125;,[_v(&quot;submit&quot;)])&#125;</span><span class="hljs-comment">// v-model</span><span class="hljs-keyword">const</span> template = <span class="hljs-string">`&lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;`</span><span class="hljs-comment">// 主要看 input 事件</span><span class="hljs-comment">// with(this)&#123;return _c(&#x27;input&#x27;,&#123;directives:[&#123;name:&quot;model&quot;,rawName:&quot;v-model&quot;,value:(name),expression:&quot;name&quot;&#125;],attrs:&#123;&quot;type&quot;:&quot;text&quot;&#125;,domProps:&#123;&quot;value&quot;:(name)&#125;,on:&#123;&quot;input&quot;:function($event)&#123;if($event.target.composing)return;name=$event.target.value&#125;&#125;&#125;)&#125;</span><span class="hljs-comment">// render 函数</span><span class="hljs-comment">// 返回 vnode</span><span class="hljs-comment">// patch</span><span class="hljs-comment">// 编译</span><span class="hljs-keyword">const</span> res = compiler.compile(template)<span class="hljs-built_in">console</span>.log(res.render)<span class="hljs-comment">// ---------------分割线--------------</span><span class="hljs-comment">// // 从 vue 源码中找到缩写函数的含义</span><span class="hljs-comment">// function installRenderHelpers (target) &#123;</span><span class="hljs-comment">//     target._o = markOnce;</span><span class="hljs-comment">//     target._n = toNumber;</span><span class="hljs-comment">//     target._s = toString;</span><span class="hljs-comment">//     target._l = renderList;</span><span class="hljs-comment">//     target._t = renderSlot;</span><span class="hljs-comment">//     target._q = looseEqual;</span><span class="hljs-comment">//     target._i = looseIndexOf;</span><span class="hljs-comment">//     target._m = renderStatic;</span><span class="hljs-comment">//     target._f = resolveFilter;</span><span class="hljs-comment">//     target._k = checkKeyCodes;</span><span class="hljs-comment">//     target._b = bindObjectProps;</span><span class="hljs-comment">//     target._v = createTextVNode;</span><span class="hljs-comment">//     target._e = createEmptyVNode;</span><span class="hljs-comment">//     target._u = resolveScopedSlots;</span><span class="hljs-comment">//     target._g = bindObjectListeners;</span><span class="hljs-comment">//     target._d = bindDynamicKeys;</span><span class="hljs-comment">//     target._p = prependModifier;</span><span class="hljs-comment">// &#125;</span></code></pre><h3 id="执行render-生成-vnode"><a href="#执行render-生成-vnode" class="headerlink" title="执行render 生成 vnode"></a>执行render 生成 vnode</h3><p>执行render函数生成vnode</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>模版编译为render函数，执行render函数返回vnode</li><li>基于vonde再执行patch和diff</li><li>使用webpack vue-loader，会在开发环境下编译模版</li><li>可以使用render代替template</li></ul>]]></content>
    
    
    <categories>
      
      <category>框架、库学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue的数据劫持</title>
    <link href="/2018/02/16/vue/Vue%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81/"/>
    <url>/2018/02/16/vue/Vue%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8A%AB%E6%8C%81/</url>
    
    <content type="html"><![CDATA[<h3 id="Object-defineProperty-obj-prop-desc"><a href="#Object-defineProperty-obj-prop-desc" class="headerlink" title="Object.defineProperty(obj, prop, desc)"></a>Object.defineProperty(obj, prop, desc)</h3><p><strong>核心的API</strong></p><h3 id="监听对象（简单）"><a href="#监听对象（简单）" class="headerlink" title="监听对象（简单）"></a>监听对象（简单）</h3><pre><code class="hljs js"><span class="hljs-keyword">const</span> data = &#123;&#125;<span class="hljs-keyword">const</span> name = <span class="hljs-string">&#x27;zhangsan&#x27;</span><span class="hljs-built_in">Object</span>.defineProperty(data, <span class="hljs-string">&#x27;name&#x27;</span> ,&#123;    get: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;get &#x27;</span>+name)        <span class="hljs-keyword">return</span> name    &#125;,    set: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value</span>)</span>&#123;        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;set &#x27;</span>+value)        name = value     &#125;&#125;)</code></pre><h3 id="复杂对象监听"><a href="#复杂对象监听" class="headerlink" title="复杂对象监听"></a>复杂对象监听</h3><h4 id="线程上的代码"><a href="#线程上的代码" class="headerlink" title="线程上的代码"></a>线程上的代码</h4><pre><code class="hljs js"><span class="hljs-comment">// 准备数据</span><span class="hljs-keyword">const</span> data = &#123;    name: <span class="hljs-string">&#x27;zhangsan&#x27;</span>,    age: <span class="hljs-number">20</span>,    info: &#123;        address: <span class="hljs-string">&#x27;北京&#x27;</span> <span class="hljs-comment">// 需要深度监听</span>    &#125;,    nums: [<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>]&#125;<span class="hljs-comment">// 监听数据</span>observer(data)<span class="hljs-comment">// 测试</span>data.name = <span class="hljs-string">&#x27;lisi&#x27;</span>data.age = <span class="hljs-number">21</span></code></pre><h4 id="observer方法"><a href="#observer方法" class="headerlink" title="observer方法"></a>observer方法</h4><pre><code class="hljs js"><span class="hljs-comment">// 监听对象属性</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">observer</span>(<span class="hljs-params">target</span>) </span>&#123;    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> target !== <span class="hljs-string">&#x27;object&#x27;</span> || target === <span class="hljs-literal">null</span>) &#123;        <span class="hljs-comment">// 不是对象或数组</span>        <span class="hljs-keyword">return</span> target    &#125;    <span class="hljs-comment">// 重新定义各个属性（for in 也可以遍历数组）</span>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> target) &#123;        defineReactive(target, key, target[key])    &#125;&#125;</code></pre><h4 id="defineReactive方法"><a href="#defineReactive方法" class="headerlink" title="defineReactive方法"></a>defineReactive方法</h4><pre><code class="hljs js"><span class="hljs-comment">// 重新定义属性，监听起来</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">defineReactive</span>(<span class="hljs-params">target, key, value</span>) </span>&#123;    <span class="hljs-comment">// 深度监听</span>    observer(value)    <span class="hljs-comment">// 核心 API</span>    <span class="hljs-built_in">Object</span>.defineProperty(target, key, &#123;        get() &#123;            <span class="hljs-keyword">return</span> value        &#125;,        set(newValue) &#123;            <span class="hljs-keyword">if</span> (newValue !== value) &#123;                <span class="hljs-comment">// 深度监听</span>                observer(newValue)                <span class="hljs-comment">// 设置新值</span>                <span class="hljs-comment">// 注意，value 一直在闭包中，此处设置完之后，再 get 时也是会获取最新的值</span>                value = newValue                <span class="hljs-comment">// 触发更新视图</span>                updateView()            &#125;        &#125;    &#125;)&#125;</code></pre><blockquote><p>此处使用递归的形式，进行对象的向下遍历</p></blockquote><h4 id="Object-defineProperty的缺点"><a href="#Object-defineProperty的缺点" class="headerlink" title="Object.defineProperty的缺点"></a>Object.defineProperty的缺点</h4><ul><li>深度监听，需要一次性递归到底，计算量大</li><li>无法监听新增/删除属性（所以使用Vue的set和delete方法）</li><li>无法监听原生数组，需要特殊处理</li></ul><h3 id="数组监听"><a href="#数组监听" class="headerlink" title="数组监听"></a>数组监听</h3><h4 id="对数组进行重新定义"><a href="#对数组进行重新定义" class="headerlink" title="对数组进行重新定义"></a>对数组进行重新定义</h4><pre><code class="hljs js"><span class="hljs-comment">// 重新定义数组原型</span><span class="hljs-keyword">const</span> oldArrayProperty = <span class="hljs-built_in">Array</span>.prototype<span class="hljs-comment">// 创建新对象，原型指向 oldArrayProperty ，再扩展新的方法不会影响原型</span><span class="hljs-keyword">const</span> arrProto = <span class="hljs-built_in">Object</span>.create(oldArrayProperty);[<span class="hljs-string">&#x27;push&#x27;</span>, <span class="hljs-string">&#x27;pop&#x27;</span>, <span class="hljs-string">&#x27;shift&#x27;</span>, <span class="hljs-string">&#x27;unshift&#x27;</span>, <span class="hljs-string">&#x27;splice&#x27;</span>].forEach(<span class="hljs-function"><span class="hljs-params">methodName</span> =&gt;</span> &#123;    arrProto[methodName] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;        updateView() <span class="hljs-comment">// 触发视图更新</span>        <span class="hljs-comment">// 在执行updateView后，任然能够继续执行数组对象原有的方法</span>        oldArrayProperty[methodName].call(<span class="hljs-built_in">this</span>, ...arguments)        <span class="hljs-comment">// 污染全局</span>        <span class="hljs-comment">// Array.prototype.push.call(this, ...arguments)</span>    &#125;&#125;)</code></pre><h4 id="修改observer"><a href="#修改observer" class="headerlink" title="修改observer"></a>修改observer</h4><pre><code class="hljs js"><span class="hljs-comment">// 监听对象属性</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">observer</span>(<span class="hljs-params">target</span>) </span>&#123;    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> target !== <span class="hljs-string">&#x27;object&#x27;</span> || target === <span class="hljs-literal">null</span>) &#123;        <span class="hljs-comment">// 不是对象或数组</span>        <span class="hljs-keyword">return</span> target    &#125;    <span class="hljs-comment">// 污染全局的 Array 原型</span>    <span class="hljs-comment">// Array.prototype.push = function () &#123;</span>    <span class="hljs-comment">//     updateView()</span>    <span class="hljs-comment">//     ...</span>    <span class="hljs-comment">// &#125;</span>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Array</span>.isArray(target)) &#123;        target.__proto__ = arrProto    &#125;    <span class="hljs-comment">// 重新定义各个属性（for in 也可以遍历数组）</span>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> target) &#123;        defineReactive(target, key, target[key])    &#125;&#125;</code></pre>]]></content>
    
    
    <categories>
      
      <category>框架、库学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue基础二</title>
    <link href="/2018/01/22/vue/Vue%E5%9F%BA%E7%A1%80%E4%BA%8C/"/>
    <url>/2018/01/22/vue/Vue%E5%9F%BA%E7%A1%80%E4%BA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue基础学习笔记"><a href="#Vue基础学习笔记" class="headerlink" title="Vue基础学习笔记"></a>Vue基础学习笔记</h1><h2 id="循环渲染"><a href="#循环渲染" class="headerlink" title="循环渲染"></a>循环渲染</h2><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>遍历数组<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in listArr&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;item.id&quot;</span>&gt;</span>                &#123;&#123;index&#125;&#125; - &#123;&#123;item.id&#125;&#125; - &#123;&#123;item.title&#125;&#125;            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>遍历对象<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> &gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(val, key, index) in listObj&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;key&quot;</span>&gt;</span>                &#123;&#123;index&#125;&#125; - &#123;&#123;key&#125;&#125; -  &#123;&#123;val.title&#125;&#125;            <span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span>    data() &#123;<span class="javascript">        <span class="hljs-keyword">return</span> &#123;</span><span class="javascript">            flag: <span class="hljs-literal">false</span>,</span>            listArr: [<span class="javascript">                &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;标题1&#x27;</span> &#125;, <span class="hljs-comment">// 数据结构中，最好有 id ，方便使用 key</span></span><span class="javascript">                &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;标题2&#x27;</span> &#125;,</span><span class="javascript">                &#123; <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;标题3&#x27;</span> &#125;</span>            ],            listObj: &#123;<span class="javascript">                a: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;标题1&#x27;</span> &#125;,</span><span class="javascript">                b: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;标题2&#x27;</span> &#125;,</span><span class="javascript">                c: &#123; <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;标题3&#x27;</span> &#125;,</span>            &#125;        &#125;    &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><ul><li>v-for不光能遍历数组，也可以遍历对象</li><li>v-for和v-if不能同时使用</li></ul><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;increment1&quot;</span>&gt;</span>+1<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;increment2(2, $event)&quot;</span>&gt;</span>+2<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span>    data() &#123;<span class="javascript">        <span class="hljs-keyword">return</span> &#123;</span>            num: 0        &#125;    &#125;,    methods: &#123;        increment1(event) &#123;<span class="javascript">            <span class="hljs-comment">// eslint-disable-next-line</span></span><span class="javascript">            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;event&#x27;</span>, event, event.__proto__.constructor) <span class="hljs-comment">// 是原生的 event 对象</span></span><span class="javascript">            <span class="hljs-comment">// eslint-disable-next-line</span></span><span class="javascript">            <span class="hljs-built_in">console</span>.log(event.target)</span><span class="javascript">            <span class="hljs-comment">// eslint-disable-next-line</span></span><span class="javascript">            <span class="hljs-built_in">console</span>.log(event.currentTarget) <span class="hljs-comment">// 注意，事件是被注册到当前元素的，和 React 不一样</span></span><span class="javascript">            <span class="hljs-built_in">this</span>.num++</span><span class="javascript">            <span class="hljs-comment">// 1. event 是原生的</span></span><span class="javascript">            <span class="hljs-comment">// 2. 事件被挂载到当前元素</span></span><span class="javascript">            <span class="hljs-comment">// 和 DOM 事件一样</span></span>        &#125;,        increment2(val, event) &#123;<span class="javascript">            <span class="hljs-comment">// eslint-disable-next-line</span></span><span class="javascript">            <span class="hljs-built_in">console</span>.log(event.target)</span><span class="javascript">            <span class="hljs-built_in">this</span>.num = <span class="hljs-built_in">this</span>.num + val</span>        &#125;,        loadHandler() &#123;<span class="javascript">            <span class="hljs-comment">// do some thing</span></span>        &#125;    &#125;,    mounted() &#123;<span class="javascript">        <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-built_in">this</span>.loadHandler)</span>    &#125;,    beforeDestroy() &#123;<span class="javascript">        <span class="hljs-comment">//【注意】用 vue 绑定的事件，组建销毁时会自动被解绑</span></span><span class="javascript">        <span class="hljs-comment">// 自己绑定的事件，需要自己销毁！！！</span></span><span class="javascript">        <span class="hljs-built_in">window</span>.removeEventListener(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-built_in">this</span>.loadHandler)</span>    &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>输入框: &#123;&#123;name&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model.trim</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model.lazy</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;age&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>多行文本: &#123;&#123;desc&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;desc&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 注意，&lt;textarea&gt;&#123;&#123;desc&#125;&#125;&lt;/textarea&gt; 是不允许的！！！ --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>复选框 &#123;&#123;checked&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checked&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>多个复选框 &#123;&#123;checkedNames&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;jack&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Jack&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checkedNames&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;jack&quot;</span>&gt;</span>Jack<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;john&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;John&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checkedNames&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;john&quot;</span>&gt;</span>John<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mike&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;Mike&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;checkedNames&quot;</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;mike&quot;</span>&gt;</span>Mike<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>单选 &#123;&#123;gender&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;male&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;male&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;gender&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;male&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;female&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;female&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;gender&quot;</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;female&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>下拉列表选择 &#123;&#123;selected&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selected&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">disabled</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>请选择<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>下拉列表选择（多选） &#123;&#123;selectedList&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;selectedList&quot;</span> <span class="hljs-attr">multiple</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">disabled</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span>请选择<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>C<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span>    data() &#123;<span class="javascript">        <span class="hljs-keyword">return</span> &#123;</span><span class="javascript">            name: <span class="hljs-string">&#x27;双越&#x27;</span>,</span>            age: 18,<span class="javascript">            desc: <span class="hljs-string">&#x27;自我介绍&#x27;</span>,</span><span class="javascript">            checked: <span class="hljs-literal">true</span>,</span>            checkedNames: [],<span class="javascript">            gender: <span class="hljs-string">&#x27;male&#x27;</span>,</span><span class="javascript">            selected: <span class="hljs-string">&#x27;&#x27;</span>,</span>            selectedList: []        &#125;    &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>框架、库学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue基础一</title>
    <link href="/2018/01/20/vue/Vue%E5%9F%BA%E7%A1%80%E4%B8%80/"/>
    <url>/2018/01/20/vue/Vue%E5%9F%BA%E7%A1%80%E4%B8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Vue基础学习笔记"><a href="#Vue基础学习笔记" class="headerlink" title="Vue基础学习笔记"></a>Vue基础学习笔记</h1><h2 id="插值表达式"><a href="#插值表达式" class="headerlink" title="插值表达式"></a>插值表达式</h2><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>文本插值 &#123;&#123;message&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>JS 表达式 &#123;&#123; flag ? &#x27;yes&#x27; : &#x27;no&#x27; &#125;&#125; （只能是表达式，不能是 js 语句）<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">:id</span>=<span class="hljs-string">&quot;dynamicId&quot;</span>&gt;</span>动态属性 id<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">hr</span>/&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-html</span>=<span class="hljs-string">&quot;rawHtml&quot;</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>有 xss 风险<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>【注意】使用 v-html 之后，将会覆盖子元素<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-comment">&lt;!-- 其他常用指令后面讲 --&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span>    data() &#123;<span class="javascript">        <span class="hljs-keyword">return</span> &#123;</span><span class="javascript">            message: <span class="hljs-string">&#x27;hello vue&#x27;</span>,</span><span class="javascript">            flag: <span class="hljs-literal">true</span>,</span><span class="handlebars"><span class="xml">            rawHtml: &#x27;指令 - 原始 html <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>加粗<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>斜体<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>&#x27;,</span></span><span class="javascript">            dynamicId: <span class="hljs-string">`id-<span class="hljs-subst">$&#123;<span class="hljs-built_in">Date</span>.now()&#125;</span>`</span></span>        &#125;    &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h2 id="computed和watch"><a href="#computed和watch" class="headerlink" title="computed和watch"></a>computed和watch</h2><h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><p>一个计算属性,类似于过滤器,对绑定到view的数据进行处理。</p><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;    data: &#123;        firstName: <span class="hljs-string">&#x27;Foo&#x27;</span>,        lastName: <span class="hljs-string">&#x27;Bar&#x27;</span>    &#125;,    computed: &#123;        fullName: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-built_in">this</span>.lastName        &#125;    &#125;&#125;</code></pre><p><strong>fullName不可在data里面定义</strong></p><h4 id="get和set用法"><a href="#get和set用法" class="headerlink" title="get和set用法"></a>get和set用法</h4><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;    data: &#123;        firstName: <span class="hljs-string">&#x27;Foo&#x27;</span>,        lastName: <span class="hljs-string">&#x27;Bar&#x27;</span>    &#125;,    computed: &#123;        fullName:&#123;            get()&#123;<span class="hljs-comment">//回调函数 当需要读取当前属性值是执行，根据相关数据计算并返回当前属性的值</span>                <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-built_in">this</span>.lastName            &#125;,            set(val)&#123;<span class="hljs-comment">//监视当前属性值的变化，当属性值发生变化时执行，更新相关的属性数据</span>                <span class="hljs-comment">//val就是fullName的最新属性值</span>                <span class="hljs-built_in">console</span>.log(val)                <span class="hljs-keyword">const</span> names = val.split(<span class="hljs-string">&#x27; &#x27;</span>);                <span class="hljs-built_in">console</span>.log(names)                <span class="hljs-built_in">this</span>.firstName = names[<span class="hljs-number">0</span>];                <span class="hljs-built_in">this</span>.lastName = names[<span class="hljs-number">1</span>];            &#125;        &#125;    &#125;&#125;</code></pre><p><strong>computed有缓存，data不变则不会重新计算</strong></p><h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><p>watch是一个观察的动作</p><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;    data: &#123;        firstName: <span class="hljs-string">&#x27;Foo&#x27;</span>,        lastName: <span class="hljs-string">&#x27;Bar&#x27;</span>,        fullName: <span class="hljs-string">&#x27;Foo Bar&#x27;</span>    &#125;,    watch: &#123;        firstName: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) </span>&#123;            <span class="hljs-built_in">this</span>.fullName = val + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-built_in">this</span>.lastName        &#125;,        lastName: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">val</span>) </span>&#123;            <span class="hljs-built_in">this</span>.fullName = <span class="hljs-built_in">this</span>.firstName + <span class="hljs-string">&#x27; &#x27;</span> + val        &#125;    &#125;&#125;</code></pre><h4 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h4><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;    data() &#123;        <span class="hljs-keyword">return</span>&#123;            <span class="hljs-string">&#x27;first&#x27;</span>:<span class="hljs-number">2</span>        &#125;    &#125;,    watch: &#123;        first()&#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.first)        &#125;    &#125;,&#125;</code></pre><h4 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h4><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;    data()&#123;        <span class="hljs-keyword">return</span>&#123;            <span class="hljs-string">&#x27;first&#x27;</span>:&#123;                second:<span class="hljs-number">0</span>            &#125;        &#125;    &#125;,    watch:&#123;        secondChange:&#123;            handler(oldVal,newVal)&#123;                <span class="hljs-built_in">console</span>.log(oldVal)                <span class="hljs-built_in">console</span>.log(newVal)            &#125;,            deep:<span class="hljs-literal">true</span>        &#125;    &#125;&#125;</code></pre><ul><li><p><strong>console.log打印的结果,发现oldVal和newVal值是一样的,所以深度监听虽然可以监听到对象的变化,但是无法监听到具体对象里面那个属性的变化（只针对引用类型）</strong></p></li><li><p>oldVal和newVal值一样的原因是它们索引同一个对象/数组。Vue <strong>不会保留修改之前值的副本</strong></p></li><li><p>深度监听对应的函数名必须为handler,否则无效果,因为watcher里面对应的是对handler的调用</p></li></ul><h4 id="监听对象单个属性"><a href="#监听对象单个属性" class="headerlink" title="监听对象单个属性"></a>监听对象单个属性</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;    data() &#123;        <span class="hljs-keyword">return</span> &#123;            first: &#123;                second: <span class="hljs-number">0</span>            &#125;        &#125;;    &#125;,    watch: &#123;        <span class="hljs-string">&quot;first.second&quot;</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">newVal, oldVal</span>) </span>&#123;            <span class="hljs-built_in">console</span>.log(newVal, oldVal);        &#125;    &#125;&#125;</code></pre><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>用computed作为中间件转化,因为computed可以取到对应的属性值</p><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;    data() &#123;        <span class="hljs-keyword">return</span> &#123;            first: &#123;                second: <span class="hljs-number">0</span>                &#125;            &#125;;    &#125;,    computed: &#123;        secondChange() &#123;            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.first.second;        &#125;    &#125;,    watch: &#123;        secondChange() &#123;            <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&quot;second属性值变化了&quot;</span>);        &#125;    &#125;&#125;</code></pre><h3 id="computed和watch的区别"><a href="#computed和watch的区别" class="headerlink" title="computed和watch的区别"></a>computed和watch的区别</h3><h4 id="computed特性"><a href="#computed特性" class="headerlink" title="computed特性"></a>computed特性</h4><ol><li>是计算值</li><li>应用：就是简化tempalte里面双花括号计算和处理props或$emit的传值</li><li>具有缓存性，页面重新渲染值不变化,计算属性会立即返回之前的计算结果，而不必再次执行函数</li></ol><h4 id="watch特性"><a href="#watch特性" class="headerlink" title="watch特性"></a>watch特性</h4><ol><li>是观察的动作</li><li>应用：监听props，$emit或本组件的值执行异步操作</li><li>无缓存性，页面重新渲染时值不变化也会执行</li></ol><h2 id="class和style"><a href="#class和style" class="headerlink" title="class和style"></a>class和style</h2><ul><li>使用动态属性</li><li>使用驼峰式写法</li></ul><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;&#123; black: isBlack, yellow: isYellow &#125;&quot;</span>&gt;</span>使用 class<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">:class</span>=<span class="hljs-string">&quot;[black, yellow]&quot;</span>&gt;</span>使用 class （数组）<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">:style</span>=<span class="hljs-string">&quot;styleData&quot;</span>&gt;</span>使用 style<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span>    data() &#123;<span class="javascript">        <span class="hljs-keyword">return</span> &#123;</span><span class="javascript">            isBlack: <span class="hljs-literal">true</span>,</span><span class="javascript">            isYellow: <span class="hljs-literal">true</span>,</span><span class="javascript">            black: <span class="hljs-string">&#x27;black&#x27;</span>,</span><span class="javascript">            yellow: <span class="hljs-string">&#x27;yellow&#x27;</span>,</span>            styleData: &#123;<span class="javascript">                fontSize: <span class="hljs-string">&#x27;40px&#x27;</span>, <span class="hljs-comment">// 转换为驼峰式</span></span><span class="javascript">                color: <span class="hljs-string">&#x27;red&#x27;</span>,</span><span class="javascript">                backgroundColor: <span class="hljs-string">&#x27;#ccc&#x27;</span> <span class="hljs-comment">// 转换为驼峰式</span></span>            &#125;        &#125;    &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><span class="css">    <span class="hljs-selector-class">.black</span> &#123;</span><span class="css">        <span class="hljs-selector-tag">background-color</span>: <span class="hljs-selector-id">#999</span>;</span>    &#125;<span class="css">    <span class="hljs-selector-class">.yellow</span> &#123;</span>        color: yellow;    &#125;<span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></code></pre><h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;type === &#x27;a&#x27;&quot;</span>&gt;</span>A<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-else-if</span>=<span class="hljs-string">&quot;type === &#x27;b&#x27;&quot;</span>&gt;</span>B<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-else</span>&gt;</span>other<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;type === &#x27;a&#x27;&quot;</span>&gt;</span>A by v-show<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-show</span>=<span class="hljs-string">&quot;type === &#x27;b&#x27;&quot;</span>&gt;</span>B by v-show<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span>    data() &#123;<span class="javascript">        <span class="hljs-keyword">return</span> &#123;</span><span class="javascript">            type: <span class="hljs-string">&#x27;a&#x27;</span></span>        &#125;    &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre><h4 id="v-if和v-show"><a href="#v-if和v-show" class="headerlink" title="v-if和v-show"></a>v-if和v-show</h4><ul><li>v-if是false时候不会渲染dom，v-show则是display:none</li><li>频繁切换使用v-show,不会频繁渲染dom</li></ul>]]></content>
    
    
    <categories>
      
      <category>框架、库学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RainbowSort [要求 Tc: O(n) Sc:O(1)]</title>
    <link href="/2017/11/09/algorithm/RainbowSort/"/>
    <url>/2017/11/09/algorithm/RainbowSort/</url>
    
    <content type="html"><![CDATA[<p>给定一系列球，其中球的颜色只能是红色，黄色或蓝色，对球进行排序，以使所有红色球都分组在左侧，所有黄色球都分组在中间，所有蓝色球分组在右侧。</p><p>例：</p><blockquote><p>[红] 被排序为 [红]</p></blockquote><blockquote><p>[黄，红] 被排序为 [红，黄]</p></blockquote><blockquote><p>[黄, 红, 红, 蓝, 黄, 红, 蓝] 被排序为 [红, 红, 红, 黄, 黄, 蓝, 蓝]</p></blockquote><p>假设条件:</p><blockquote><p>输入数组不为 null。</p></blockquote><p>corner case:</p><p>如果输入数组的长度为零怎么办？在这种情况下，我们应该直接返回空数组。</p><p><strong>解法：</strong></p><p><strong>思路:</strong> 本题思路是挡板思想, 使用三个挡板四个区域的思想进行划分 (交换数组元素位置)</p><p><strong>挡板的物理意义: [0-i) 全是红色,[i,j) 之间为黄色,(k-&gt;n-1] 全为蓝色，[j-k] 为未知探索区域</strong></p><p>j 为快指针</p><pre><code class="hljs js"><span class="hljs-keyword">const</span> input = [<span class="hljs-string">&#x27;黄&#x27;</span>,<span class="hljs-string">&#x27;红&#x27;</span>,<span class="hljs-string">&#x27;红&#x27;</span>,<span class="hljs-string">&#x27;蓝&#x27;</span>,<span class="hljs-string">&#x27;黄&#x27;</span>,<span class="hljs-string">&#x27;红&#x27;</span>,<span class="hljs-string">&#x27;蓝&#x27;</span>]<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rainbowSort</span>(<span class="hljs-params">rainbow</span>) </span>&#123;    <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, j = <span class="hljs-number">0</span>, k = rainbow.length - <span class="hljs-number">1</span>;    <span class="hljs-keyword">while</span> (j &lt;= k) &#123;        <span class="hljs-keyword">if</span> (rainbow[j] === <span class="hljs-string">&#x27;红&#x27;</span>) &#123;            swap(rainbow,i,j);            i++;            j++;        &#125;        <span class="hljs-keyword">if</span> (rainbow[j] === <span class="hljs-string">&#x27;黄&#x27;</span>) &#123;            j++;        &#125;        <span class="hljs-keyword">if</span> (rainbow[j] === <span class="hljs-string">&#x27;蓝&#x27;</span>) &#123;            swap(rainbow, j, k); <span class="hljs-comment">//这里不写j++是因为从k交换过来的元素不能保证就是黄色,为了安全起见下次循环再检查一次j位置。</span>            k--;        &#125;    &#125;&#125;<span class="hljs-comment">//辅助交换函数</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">swap</span>(<span class="hljs-params">arr,i,j</span>) </span>&#123;    [arr[i],arr[j]] = [arr[j],arr[i]]&#125;rainbowSort(input);<span class="hljs-built_in">console</span>.log(input);</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法与逻辑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现new、bind、instanceOf、deepClone</title>
    <link href="/2017/08/21/write-code%20/%E5%AE%9E%E7%8E%B0new%E3%80%81bind%E3%80%81instanceOf%E3%80%81deepClone/"/>
    <url>/2017/08/21/write-code%20/%E5%AE%9E%E7%8E%B0new%E3%80%81bind%E3%80%81instanceOf%E3%80%81deepClone/</url>
    
    <content type="html"><![CDATA[<h3 id="new-操作符"><a href="#new-操作符" class="headerlink" title="new 操作符"></a>new 操作符</h3><pre><code class="hljs js"><span class="hljs-keyword">var</span> New = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">Fn</span>) </span>&#123;  <span class="hljs-keyword">var</span> obj = &#123;&#125;; <span class="hljs-comment">// 创建空对象</span>  <span class="hljs-keyword">var</span> arg = <span class="hljs-built_in">Array</span>.prototype.slice.call(<span class="hljs-built_in">arguments</span>, <span class="hljs-number">1</span>);  obj.__proto__ = Fn.prototype; <span class="hljs-comment">// 将obj的原型链__proto__指向构造函数的原型prototype</span>  obj.__proto__.constructor = Fn; <span class="hljs-comment">// 在原型链 __proto__上设置构造函数的构造器constructor，为了实例化Fn</span>  Fn.apply(obj, arg); <span class="hljs-comment">// 执行Fn，并将构造函数Fn执行obj</span>  <span class="hljs-keyword">return</span> obj; <span class="hljs-comment">// 返回结果</span>&#125;;</code></pre><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><pre><code class="hljs js"><span class="hljs-keyword">const</span> getType = <span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;  <span class="hljs-comment">// 获取数据类型</span>  <span class="hljs-keyword">const</span> baseType = <span class="hljs-built_in">Object</span>.prototype.toString    .call(data)    .replace(<span class="hljs-regexp">/^\[object\s(.+)\]$/g</span>, <span class="hljs-string">&quot;$1&quot;</span>)    .toLowerCase();  <span class="hljs-keyword">const</span> type = data <span class="hljs-keyword">instanceof</span> Element ? <span class="hljs-string">&quot;element&quot;</span> : baseType;  <span class="hljs-keyword">return</span> type;&#125;;<span class="hljs-keyword">const</span> isPrimitive = <span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;  <span class="hljs-comment">// 判断是否是基本数据类型</span>  <span class="hljs-keyword">const</span> primitiveType = <span class="hljs-string">&quot;undefined,null,boolean,string,symbol,number,bigint,map,set,weakmap,weakset&quot;</span>.split(    <span class="hljs-string">&quot;,&quot;</span>  ); <span class="hljs-comment">// 其实还有很多类型</span>  <span class="hljs-keyword">return</span> primitiveType.includes(getType(data));&#125;;<span class="hljs-keyword">const</span> isObject = <span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> getType(data) === <span class="hljs-string">&quot;object&quot;</span>;<span class="hljs-keyword">const</span> isArray = <span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> getType(data) === <span class="hljs-string">&quot;array&quot;</span>;<span class="hljs-keyword">const</span> deepClone = <span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;  <span class="hljs-keyword">let</span> cache = &#123;&#125;; <span class="hljs-comment">// 缓存值，防止循环引用</span>  <span class="hljs-keyword">const</span> baseClone = <span class="hljs-function"><span class="hljs-params">_data</span> =&gt;</span> &#123;    <span class="hljs-keyword">let</span> res;    <span class="hljs-keyword">if</span> (isPrimitive(_data)) &#123;      <span class="hljs-keyword">return</span> data;    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isObject(_data)) &#123;      res = &#123; ..._data &#125;;    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (isArray(_data)) &#123;      res = [..._data];    &#125;    <span class="hljs-comment">// 判断是否有复杂类型的数据，有就递归</span>    <span class="hljs-built_in">Reflect</span>.ownKeys(res).forEach(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;      <span class="hljs-keyword">if</span> (res[key] &amp;&amp; getType(res[key]) === <span class="hljs-string">&quot;object&quot;</span>) &#123;        <span class="hljs-comment">// 用cache来记录已经被复制过的引用地址。用来解决循环引用的问题</span>        <span class="hljs-keyword">if</span> (cache[res[key]]) &#123;          res[key] = cache[res[key]];        &#125; <span class="hljs-keyword">else</span> &#123;          cache[res[key]] = res[key];          res[key] = baseClone(res[key]);        &#125;      &#125;    &#125;);    <span class="hljs-keyword">return</span> res;  &#125;;  <span class="hljs-keyword">return</span> baseClone(data);&#125;;</code></pre><h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><pre><code class="hljs js"><span class="hljs-built_in">Function</span>.prototype.bind2 = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">context</span>) </span>&#123;  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">this</span> !== <span class="hljs-string">&quot;function&quot;</span>) &#123;    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;...&quot;</span>);  &#125;  <span class="hljs-keyword">var</span> that = <span class="hljs-built_in">this</span>;  <span class="hljs-keyword">var</span> args1 = <span class="hljs-built_in">Array</span>.prototype.slice.call(<span class="hljs-built_in">arguments</span>, <span class="hljs-number">1</span>);  <span class="hljs-keyword">var</span> bindFn = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;    <span class="hljs-keyword">var</span> args2 = <span class="hljs-built_in">Array</span>.prototype.slice.call(<span class="hljs-built_in">arguments</span>);    <span class="hljs-keyword">var</span> that2 = <span class="hljs-built_in">this</span> <span class="hljs-keyword">instanceof</span> bindFn ? <span class="hljs-built_in">this</span> : context; <span class="hljs-comment">// 如果当前函数的this指向的是构造函数中的this 则判定为new 操作。如果this是构造函数bindFn new出来的实例，那么此处的this一定是该实例本身。</span>    <span class="hljs-keyword">return</span> that.apply(that2, args1.concat(args2));  &#125;;  <span class="hljs-keyword">var</span> Fn = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;&#125;; <span class="hljs-comment">// 连接原型链用Fn</span>  <span class="hljs-comment">// 原型赋值</span>  Fn.prototype = <span class="hljs-built_in">this</span>.prototype; <span class="hljs-comment">// bindFn的prototype指向和this的prototype一样，指向同一个原型对象</span>  bindFn.prototype = <span class="hljs-keyword">new</span> Fn();  <span class="hljs-keyword">return</span> bindFn;&#125;;</code></pre><h3 id="instanceOf"><a href="#instanceOf" class="headerlink" title="instanceOf"></a>instanceOf</h3><pre><code class="hljs js"><span class="hljs-keyword">const</span> instanceOf = <span class="hljs-function">(<span class="hljs-params">left, right</span>) =&gt;</span> &#123;  <span class="hljs-keyword">let</span> proto = left.__proto__;  <span class="hljs-keyword">let</span> prototype = right.prototype;  <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;    <span class="hljs-keyword">if</span> (proto === <span class="hljs-literal">null</span>) &#123;      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (proto === prototype) &#123;      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;    &#125;    proto = proto.__proto__;  &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>手撕代码</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack相关问题</title>
    <link href="/2017/06/25/webapck/webpack%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <url>/2017/06/25/webapck/webpack%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>随着现代前端开发的复杂度和规模越来越庞大，已经不能抛开工程化来独立开发了，如 react 的 jsx 代码必须编译后才能在浏览器中使用；又如 sass 和 less 的代码浏览器也是不支持的。 而如果摒弃了这些开发框架，那么开发的效率将大幅下降。在众多前端工程化工具中，webpack 脱颖而出成为了当今最流行的前端构建工具。 然而大多数的使用者都只是单纯的会使用，而并不知道其深层的原理。希望通过以下的面试题总结可以帮助大家温故知新、查缺补漏，知其然而又知其所以然。</p><a id="more"></a><h2 id="问题一览"><a href="#问题一览" class="headerlink" title="问题一览"></a>问题一览</h2><ol><li>webpack 与 grunt、gulp 的不同？</li><li>与 webpack 类似的工具还有哪些？谈谈你为什么最终选择（或放弃）使用 webpack？</li><li>有哪些常见的 Loader？他们是解决什么问题的？</li><li>有哪些常见的 Plugin？他们是解决什么问题的？</li><li>Loader 和 Plugin 的不同？</li><li>webpack 的构建流程是什么? 从读取配置到输出文件这个过程尽量说全</li><li>是否写过 Loader 和 Plugin？描述一下编写 loader 或 plugin 的思路？</li><li>webpack 的热更新是如何做到的？说明其原理？</li><li>如何利用 webpack 来优化前端性能？（提高性能和体验）</li><li>如何提高 webpack 的构建速度？</li><li>怎么配置单页应用？怎么配置多页应用？</li><li>npm 打包时需要注意哪些？如何利用 webpack 来更好的构建？</li><li>如何在 vue 项目中实现按需加载？</li></ol><h2 id="问题解答"><a href="#问题解答" class="headerlink" title="问题解答"></a>问题解答</h2><h3 id="1-webpack-与-grunt、gulp-的不同？"><a href="#1-webpack-与-grunt、gulp-的不同？" class="headerlink" title="1. webpack 与 grunt、gulp 的不同？"></a>1. webpack 与 grunt、gulp 的不同？</h3><p>三者都是前端构建工具，grunt 和 gulp 在早期比较流行，现在 webpack 相对来说比较主流，不过一些轻量化的任务还是会用 gulp 来处理，比如单独打包 CSS 文件等。</p><p>grunt 和 gulp 是基于任务和流（Task、Stream）的。类似 jQuery，找到一个（或一类）文件，对其做一系列链式操作，更新流上的数据， 整条链式操作构成了一个任务，多个任务就构成了整个 web 的构建流程。</p><p>webpack 是基于入口的。webpack 会自动地递归解析入口所需要加载的所有资源文件，然后用不同的 Loader 来处理不同的文件，用 Plugin 来扩展 webpack 功能。</p><p>所以总结一下：</p><ul><li>从构建思路来说</li></ul><p>gulp 和 grunt 需要开发者将整个前端构建过程拆分成多个 <code>Task</code>，并合理控制所有 <code>Task</code> 的调用关系 webpack 需要开发者找到入口，并需要清楚对于不同的资源应该使用什么 Loader 做何种解析和加工</p><ul><li>对于知识背景来说</li></ul><p>gulp 更像后端开发者的思路，需要对于整个流程了如指掌 webpack 更倾向于前端开发者的思路</p><h3 id="2-与-webpack-类似的工具还有哪些？谈谈你为什么最终选择（或放弃）使用-webpack？"><a href="#2-与-webpack-类似的工具还有哪些？谈谈你为什么最终选择（或放弃）使用-webpack？" class="headerlink" title="2. 与 webpack 类似的工具还有哪些？谈谈你为什么最终选择（或放弃）使用 webpack？"></a>2. 与 webpack 类似的工具还有哪些？谈谈你为什么最终选择（或放弃）使用 webpack？</h3><p>同样是基于入口的打包工具还有以下几个主流的：</p><ul><li>webpack</li><li>rollup</li><li>parcel</li></ul><p><strong>从应用场景上来看：</strong></p><ul><li>webpack 适用于大型复杂的前端站点构建</li><li>rollup 适用于基础库的打包，如 vue、react</li><li>parcel 适用于简单的实验性项目，他可以满足低门槛的快速看到效果</li></ul><p>由于 parcel 在打包过程中给出的调试信息十分有限，所以一旦打包出错难以调试，所以不建议复杂的项目使用 parcel</p><h3 id="3-有哪些常见的-Loader？他们是解决什么问题的？"><a href="#3-有哪些常见的-Loader？他们是解决什么问题的？" class="headerlink" title="3. 有哪些常见的 Loader？他们是解决什么问题的？"></a>3. 有哪些常见的 Loader？他们是解决什么问题的？</h3><ul><li>file-loader：把文件输出到一个文件夹中，在代码中通过相对 URL 去引用输出的文件</li><li>url-loader：和 file-loader 类似，但是能在文件很小的情况下以 base64 的方式把文件内容注入到代码中去</li><li>source-map-loader：加载额外的 Source Map 文件，以方便断点调试</li><li>image-loader：加载并且压缩图片文件</li><li>babel-loader：把 ES6 转换成 ES5</li><li>css-loader：加载 CSS，支持模块化、压缩、文件导入等特性</li><li>style-loader：把 CSS 代码注入到 JavaScript 中，通过 DOM 操作去加载 CSS。</li><li>eslint-loader：通过 ESLint 检查 JavaScript 代码</li></ul><h3 id="4-有哪些常见的-Plugin？他们是解决什么问题的？"><a href="#4-有哪些常见的-Plugin？他们是解决什么问题的？" class="headerlink" title="4. 有哪些常见的 Plugin？他们是解决什么问题的？"></a>4. 有哪些常见的 Plugin？他们是解决什么问题的？</h3><ul><li>define-plugin：定义环境变量</li><li>commons-chunk-plugin：提取公共代码</li><li>uglifyjs-webpack-plugin：通过 UglifyES 压缩 ES6 代码</li></ul><h3 id="5-Loader-和-Plugin-的不同？"><a href="#5-Loader-和-Plugin-的不同？" class="headerlink" title="5.Loader 和 Plugin 的不同？"></a>5.Loader 和 Plugin 的不同？</h3><p><strong>不同的作用</strong></p><ul><li><strong>Loader</strong> 直译为 “加载器”。Webpack 将一切文件视为模块，但是 webpack 原生是只能解析 js 文件，如果想将其他文件也打包的话，就会用到 loader。 所以 Loader 的作用是让 webpack 拥有了加载和解析非 JavaScript 文件的能力。</li><li><strong>Plugin</strong> 直译为 “插件”。Plugin 可以扩展 webpack 的功能，让 webpack 具有更多的灵活性。 在 Webpack 运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</li></ul><p><strong>不同的用法</strong></p><ul><li><strong>Loader</strong> 在 module.rules 中配置，也就是说他作为模块的解析规则而存在。 类型为数组，每一项都是一个 Object，里面描述了对于什么类型的文件（test），使用什么加载 (loader) 和使用的参数（options）</li><li><strong>Plugin</strong> 在 plugins 中单独配置。 类型为数组，每一项是一个 plugin 的实例，参数都通过构造函数传入。</li></ul><h3 id="6-webpack-的构建流程是什么-从读取配置到输出文件这个过程尽量说全"><a href="#6-webpack-的构建流程是什么-从读取配置到输出文件这个过程尽量说全" class="headerlink" title="6.webpack 的构建流程是什么? 从读取配置到输出文件这个过程尽量说全"></a>6.webpack 的构建流程是什么? 从读取配置到输出文件这个过程尽量说全</h3><p>Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：</p><ol><li>初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数；</li><li>开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译；</li><li>确定入口：根据配置中的 entry 找出所有的入口文件；</li><li>编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；</li><li>完成模块编译：在经过第 4 步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；</li><li>输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会；</li><li>输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。</li></ol><p>在以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。</p><h3 id="7-是否写过-Loader-和-Plugin？描述一下编写-loader-或-plugin-的思路？"><a href="#7-是否写过-Loader-和-Plugin？描述一下编写-loader-或-plugin-的思路？" class="headerlink" title="7. 是否写过 Loader 和 Plugin？描述一下编写 loader 或 plugin 的思路？"></a>7. 是否写过 Loader 和 Plugin？描述一下编写 loader 或 plugin 的思路？</h3><p>Loader 像一个 “翻译官” 把读到的源文件内容转义成新的文件内容，并且每个 Loader 通过链式操作，将源文件一步步翻译成想要的样子。</p><p>编写 Loader 时要遵循单一原则，每个 Loader 只做一种 “转义” 工作。 每个 Loader 的拿到的是源文件内容（source），可以通过返回值的方式将处理后的内容输出，也可以调用 this.callback() 方法，将内容返回给 webpack。 还可以通过 this.async() 生成一个 callback 函数，再用这个 callback 将处理后的内容输出出去。 此外 webpack 还为开发者准备了开发 loader 的工具函数集——loader-utils。</p><p>相对于 Loader 而言，Plugin 的编写就灵活了许多。 webpack 在运行的生命周期中会广播出许多事件，Plugin 可以监听这些事件，在合适的时机通过 Webpack 提供的 API 改变输出结果。</p><h3 id="8-webpack-的热更新是如何做到的？说明其原理？"><a href="#8-webpack-的热更新是如何做到的？说明其原理？" class="headerlink" title="8.webpack 的热更新是如何做到的？说明其原理？"></a>8.webpack 的热更新是如何做到的？说明其原理？</h3><p>webpack 的热更新又称热替换（Hot Module Replacement），缩写为 HMR。 这个机制可以做到不用刷新浏览器而将新变更的模块替换掉旧的模块。</p><p>原理：</p><p><img src="/images/pages/webpack1.jpeg" alt="image"></p><p>首先要知道 server 端和 client 端都做了处理工作</p><ol><li>第一步，在 webpack 的 watch 模式下，文件系统中某一个文件发生修改，webpack 监听到文件变化，根据配置文件对模块重新编译打包，并将打包后的代码通过简单的 JavaScript 对象保存在内存中。</li><li>第二步是 webpack-dev-server 和 webpack 之间的接口交互，而在这一步，主要是 dev-server 的中间件 webpack-dev-middleware 和 webpack 之间的交互，webpack-dev-middleware 调用 webpack 暴露的 API 对代码变化进行监控，并且告诉 webpack，将代码打包到内存中。</li><li>第三步是 webpack-dev-server 对文件变化的一个监控，这一步不同于第一步，并不是监控代码变化重新打包。当我们在配置文件中配置了 devServer.watchContentBase 为 true 的时候，Server 会监听这些配置文件夹中静态文件的变化，变化后会通知浏览器端对应用进行 live reload。注意，这儿是浏览器刷新，和 HMR 是两个概念。</li><li>第四步也是 webpack-dev-server 代码的工作，该步骤主要是通过 sockjs（webpack-dev-server 的依赖）在浏览器端和服务端之间建立一个 websocket 长连接，将 webpack 编译打包的各个阶段的状态信息告知浏览器端，同时也包括第三步中 Server 监听静态文件变化的信息。浏览器端根据这些 socket 消息进行不同的操作。当然服务端传递的最主要信息还是新模块的 hash 值，后面的步骤根据这一 hash 值来进行模块热替换。</li><li>webpack-dev-server/client 端并不能够请求更新的代码，也不会执行热更模块操作，而把这些工作又交回给了 webpack，webpack/hot/dev-server 的工作就是根据 webpack-dev-server/client 传给它的信息以及 dev-server 的配置决定是刷新浏览器呢还是进行模块热更新。当然如果仅仅是刷新浏览器，也就没有后面那些步骤了。</li><li>HotModuleReplacement.runtime 是客户端 HMR 的中枢，它接收到上一步传递给他的新模块的 hash 值，它通过 JsonpMainTemplate.runtime 向 server 端发送 Ajax 请求，服务端返回一个 json，该 json 包含了所有要更新的模块的 hash 值，获取到更新列表后，该模块再次通过 jsonp 请求，获取到最新的模块代码。这就是上图中 7、8、9 步骤。</li><li>而第 10 步是决定 HMR 成功与否的关键步骤，在该步骤中，HotModulePlugin 将会对新旧模块进行对比，决定是否更新模块，在决定更新模块后，检查模块之间的依赖关系，更新模块的同时更新模块间的依赖引用。</li><li>最后一步，当 HMR 失败后，回退到 live reload 操作，也就是进行浏览器刷新来获取最新打包代码。</li></ol><h3 id="9-如何利用-webpack-来优化前端性能？（提高性能和体验）"><a href="#9-如何利用-webpack-来优化前端性能？（提高性能和体验）" class="headerlink" title="9. 如何利用 webpack 来优化前端性能？（提高性能和体验）"></a>9. 如何利用 webpack 来优化前端性能？（提高性能和体验）</h3><p>用 webpack 优化前端性能是指优化 webpack 的输出结果，让打包的最终结果在浏览器运行快速高效。</p><ul><li>压缩代码。删除多余的代码、注释、简化代码的写法等等方式。可以利用 webpack 的 UglifyJsPlugin 和 ParallelUglifyPlugin 来压缩 JS 文件， 利用 cssnano（css-loader?minimize）来压缩 css</li><li>利用 <a href="https://cloud.tencent.com/product/cdn?from=10680">CDN</a> 加速。在构建过程中，将引用的静态资源路径修改为 CDN 上对应的路径。可以利用 webpack 对于 output 参数和各 loader 的 publicPath 参数来修改资源路径</li><li>删除死代码（Tree Shaking）。将代码中永远不会走到的片段删除掉。可以通过在启动 webpack 时追加参数 –optimize-minimize 来实现</li><li>提取公共代码。</li></ul><h3 id="10-如何提高-webpack-的构建速度？"><a href="#10-如何提高-webpack-的构建速度？" class="headerlink" title="10. 如何提高 webpack 的构建速度？"></a>10. 如何提高 webpack 的构建速度？</h3><ol><li>多入口情况下，使用 CommonsChunkPlugin 来提取公共代码</li><li>通过 externals 配置来提取常用库</li><li>利用 DllPlugin 和 DllReferencePlugin 预编译资源模块 通过 DllPlugin 来对那些我们引用但是绝对不会修改的 npm 包来进行预编译，再通过 DllReferencePlugin 将预编译的模块加载进来。</li><li>使用 Happypack 实现多线程加速编译</li><li>使用 webpack-uglify-parallel 来提升 uglifyPlugin 的压缩速度。 原理上 webpack-uglify-parallel 采用了多核并行压缩来提升压缩速度</li><li>使用 Tree-shaking 和 Scope Hoisting 来剔除多余代码</li></ol><h3 id="11-怎么配置单页应用？怎么配置多页应用？"><a href="#11-怎么配置单页应用？怎么配置多页应用？" class="headerlink" title="11. 怎么配置单页应用？怎么配置多页应用？"></a>11. 怎么配置单页应用？怎么配置多页应用？</h3><p>单页应用可以理解为 webpack 的标准模式，直接在 entry 中指定单页应用的入口即可，这里不再赘述</p><p>多页应用的话，可以使用 webpack 的 AutoWebPlugin 来完成简单自动化的构建，但是前提是项目的目录结构必须遵守他预设的规范。 多页应用中要注意的是：</p><ul><li>每个页面都有公共的代码，可以将这些代码抽离出来，避免重复的加载。比如，每个页面都引用了同一套 css 样式表</li><li>随着业务的不断扩展，页面可能会不断的追加，所以一定要让入口的配置足够灵活，避免每次添加新页面还需要修改构建配置</li></ul><h3 id="12-npm-打包时需要注意哪些？如何利用-webpack-来更好的构建？"><a href="#12-npm-打包时需要注意哪些？如何利用-webpack-来更好的构建？" class="headerlink" title="12.npm 打包时需要注意哪些？如何利用 webpack 来更好的构建？"></a>12.npm 打包时需要注意哪些？如何利用 webpack 来更好的构建？</h3><p>Npm 是目前最大的 JavaScript 模块仓库，里面有来自全世界开发者上传的可复用模块。你可能只是 JS 模块的使用者，但是有些情况你也会去选择上传自己开发的模块。 关于 NPM 模块上传的方法可以去官网上进行学习，这里只讲解如何利用 webpack 来构建。</p><p>NPM 模块需要注意以下问题：</p><ol><li>要支持 CommonJS 模块化规范，所以要求打包后的最后结果也遵守该规则。</li><li>Npm 模块使用者的环境是不确定的，很有可能并不支持 ES6，所以打包的最后结果应该是采用 ES5 编写的。并且如果 ES5 是经过转换的，请最好连同 SourceMap 一同上传。</li><li>Npm 包大小应该是尽量小（有些仓库会限制包大小）</li><li>发布的模块不能将依赖的模块也一同打包，应该让用户选择性的去自行安装。这样可以避免模块应用者再次打包时出现底层模块被重复打包的情况。</li><li>UI 组件类的模块应该将依赖的其它资源文件，例如. css 文件也需要包含在发布的模块里。</li></ol><p>基于以上需要注意的问题，我们可以对于 webpack 配置做以下扩展和优化：</p><ol><li>CommonJS 模块化规范的解决方案： 设置 output.libraryTarget=’commonjs2’使输出的代码符合 CommonJS2 模块化规范，以供给其它模块导入使用</li><li>输出 ES5 代码的解决方案：使用 babel-loader 把 ES6 代码转换成 ES5 的代码。再通过开启 devtool: ‘source-map’输出 SourceMap 以发布调试。</li><li>Npm 包大小尽量小的解决方案：Babel 在把 ES6 代码转换成 ES5 代码时会注入一些辅助函数，最终导致每个输出的文件中都包含这段辅助函数的代码，造成了代码的冗余。解决方法是修改. babelrc 文件，为其加入 transform-runtime 插件</li><li>不能将依赖模块打包到 NPM 模块中的解决方案：使用 externals 配置项来告诉 webpack 哪些模块不需要打包。</li><li>对于依赖的资源文件打包的解决方案：通过 css-loader 和 extract-text-webpack-plugin 来实现，配置如下：</li></ol><p><img src="/images/pages/webpack2.jpeg" alt="image"></p><h3 id="13-如何在-vue-项目中实现按需加载？"><a href="#13-如何在-vue-项目中实现按需加载？" class="headerlink" title="13. 如何在 vue 项目中实现按需加载？"></a>13. 如何在 vue 项目中实现按需加载？</h3><p>Vue UI 组件库的按需加载 为了快速开发前端项目，经常会引入现成的 UI 组件库如 ElementUI、iView 等，但是他们的体积和他们所提供的功能一样，是很庞大的。 而通常情况下，我们仅仅需要少量的几个组件就足够了，但是我们却将庞大的组件库打包到我们的源码中，造成了不必要的开销。</p><p>不过很多组件库已经提供了现成的解决方案，如 Element 出品的 babel-plugin-component 和 AntDesign 出品的 babel-plugin-import 安装以上插件后，在. babelrc 配置中或 babel-loader 的参数中进行设置，即可实现组件按需加载了。</p><p><img src="/images/pages/webpack3.png" alt="image"></p><p>单页应用的按需加载 现在很多前端项目都是通过单页应用的方式开发的，但是随着业务的不断扩展，会面临一个严峻的问题——首次加载的代码量会越来越多，影响用户的体验。</p><p>通过 import(<em>) 语句来控制加载时机，webpack 内置了对于 import(</em>) 的解析，会将 import(<em>) 中引入的模块作为一个新的入口在生成一个 chunk。 当代码执行到 import(</em>) 语句时，会去加载 Chunk 对应生成的文件。import() 会返回一个 Promise 对象，所以为了让浏览器支持，需要事先注入 Promise polyfill</p><p><strong>参考文章</strong></p><ul><li>关于 webpack 的面试题有哪些？</li><li>前端面试之 webpack 面试常见问题</li><li>《深入浅出 webpack》电子版</li><li>webpack 构建性能优化策略小结</li></ul>]]></content>
    
    
    <categories>
      
      <category>工程化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>twoSum [要求 Tc: O(n) Sc:O(n)]</title>
    <link href="/2017/05/07/algorithm/twoSum/"/>
    <url>/2017/05/07/algorithm/twoSum/</url>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode-cn.com/problems/two-sum/">LeetCode 第 1 题</a></p><p>按照题目要求, 我们第一时间想到的会是两层循环暴力解法：</p><h4 id="解法1-Time-O-n²-Space-O-1"><a href="#解法1-Time-O-n²-Space-O-1" class="headerlink" title="解法1: Time = O(n²), Space = O(1)"></a><strong>解法1: Time = O(n²), Space = O(1)</strong></h4><p>思路: 遍历每个元素 nums[j]，并查找是否存在一个值与 target - nums[j] 相等的目标元素。</p><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">twoSum</span>(<span class="hljs-params">nums, target</span>) </span>&#123;     <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;         <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> j = i + <span class="hljs-number">1</span>; j &lt; nums.length; j++) &#123;             <span class="hljs-keyword">if</span> (nums[j] == target - nums[i]) &#123;                 <span class="hljs-keyword">return</span> [i,j];             &#125;         &#125;     &#125;     <span class="hljs-keyword">return</span> [];&#125;</code></pre><h4 id="解法2-Time-O-n-Space-O-n"><a href="#解法2-Time-O-n-Space-O-n" class="headerlink" title="解法2: Time = O(n), Space = O(n)"></a><strong>解法2: Time = O(n), Space = O(n)</strong></h4><p>我们可以通过哈希表空间换时间。在进行迭代并将元素插入到表中的同时，我们回过头来检查哈希表中是否已经存在当前元素所对应的目标元素，如果存在，那我们就找到了问题的解，将其返回即可.(时间复杂度为 O(n), 空间复杂度也为 O(n))</p><p>符合题目要求 bingo✌</p><pre><code class="hljs js"><span class="hljs-keyword">var</span> twoSum = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">nums, target</span>) </span>&#123;    <span class="hljs-keyword">let</span> reduceHash = &#123;&#125;;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;        <span class="hljs-keyword">let</span> reduceResult = target - nums[i];        <span class="hljs-keyword">if</span> (reduceHash[reduceResult] !== <span class="hljs-literal">undefined</span>) &#123;            <span class="hljs-keyword">return</span> [reduceHash[reduceResult], i];        &#125;        reduceHash[nums[i]] = i;    &#125;&#125;;</code></pre>]]></content>
    
    
    <categories>
      
      <category>算法与逻辑</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
